#!/usr/bin/env python
#-*- coding: utf-8 -*-
################################################################################
#$Id: sportsdb_sanity.py,v 1.699 2016/03/15 13:16:31 headrun Exp $
#Copyright(c) 2005 Veveo.tv
################################################################################

import sys
import os
import MySQLdb
import re
from datetime import date, datetime, timedelta
import glob
import jinja2
import pytz
from pytz import timezone
import codecs
from collections import OrderedDict


from vtv_utils import copy_file, get_latest_file
from vtv_task import VtvTask, vtv_task_main
from vtv_user import get_vtv_user_name_and_password
import ssh_utils
#import html_markup
import StringUtil, foldFileInterface

from guidPairLoaderUtils import guidloadGuidPairList

mysql_ip = '10.28.218.81'
db_name  = 'SPORTSDB'

imagedb_ip = '10.28.218.81'
imagedb_name = 'IMAGEDB'

guidmergedb_ip = '10.28.218.81'
guidmergedb_name = "GUIDMERGE"

pattern = '%'

ip = '10.28.218.80'
SPORTS_MERGE_LIST_FILE = '/home/veveo/datagen/current/sports_merge_data/sports_to_wiki_guid_merge.list'

REPORT_DIR  = '/data/REPORTS/SANITY_REPORTS/'
LOG_DIR     = '/REPORTS/SANITY_REPORTS/SPORTSDB_SANITY/'
THIRD_LEVEL_LIST = set([816, 831, 860, 867, 852, 845, 837, 831, 824, 816, 809, 801, 794, 786, 778, 771, 765, 753, 746, 731, 723, 739, 281, 271, 50, 1, 15, 267, 231, 469, 470, 631, 764, 762, 761, 763, 1262, 1263, 1313, 1325, 1332, 1336, 1337, 1367, 1373, 1377, 1379, 1378, 1338, 1364, 1329, 1375, 1376])

TOU_SKIP_LIST  = [ 3209, 3210, 1855, 672,1858,3011,3205,3206,3207,3208,1852,1853,1854, 3200, 3201, 3202, 3203, 3204, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3168, 3169, 3170, 3171, 9, 489, 3165, 3166, 3167, 3174, 656, 657, 658, 659, 660, 662, 961, 427, 896, 977, 964, 36, 927, 421, 682, 1067, 688, 691, 926, 186, 452, 965, 718, 467, 469, 473, 954, 478, 1014, 760, 763, 1066, 1074, 1065, 466, 383, 1005, 1078, 1079, 419, 384, 1089,
               1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1110, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
               1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1238, 1244, 1248, 468, 1245,
               1246, 1247, 1251, 1252, 1261, 1262, 1263, 1265, 1280, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1282, 1283, 1284, 1285, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
               1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1329, 405, 1335, 1372, 470, 1447, 1448, 1458, 1460, 1461, 1462, 1463, 1464, 1465, 1472, 1473, 1474, 1475, 1476, 1480, 1481, 1482, 1483, 1484, 1486, 1487, 1466,
               1467, 1468, 1469, 1470, 1471, 1489, 1493, 1495, 1496, 1497, 1498, 1500, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1514, 1515, 1516, 1517, 1068, 1520, 1521, 1522, 1523, 1524, 213, 1526, 1527, 1531, 1534, 1535,
               1536, 1537, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
               1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1588, 1589, 1590, 1591, 1592, 1593, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
               1614, 1615, 1616, 1617, 1618, 1619, 1620, 1622, 1623, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1637, 1638, 1639, 1640, 1642, 1643, 1644, 1645, 1646, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
               1656, 1657, 1658, 1659, 1660, 1661, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
               1697, 1698, 1699, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
               1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
               1772, 1773, 1774, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
               1820, 1821, 1822, 1823, 1803, 1804, 1805, 1807, 1809, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1836, 1845, 1846, 1859, 1860, 1861, 1865, 1866, 1871, 1872, 1857, 1874, 1876, 1887, 693, 1878, 1883, 1889, 1902, 1903, 1194,
               1255, 1939, 1941, 1947, 1948, 1949, 305, 1256, 1916, 1950, 1951, 1952, 1953, 1954, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 8, 1930, 1938, 2048, 2049, 2050, 2051,
               2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
               2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125,
               2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162,
               2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2214, 2215,
               2242, 2243, 2244, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279,
               2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316,
               2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353,
               2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390,
               2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427,
               2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464,
               2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501,
               2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538,
               2539, 2540, 2541, 2542, 2543, 2544, 2545, 1974, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
               2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
               2043, 2044, 2045, 2046, 2047, 2216, 1936, 2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593,
               2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630,
               2631, 2632, 2633, 2634, 2635, 2636, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668,
               2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705,
               2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742,
               2743, 2744, 2745, 2746, 2747, 2236, 2749, 2238, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2760, 2761, 2763, 2240, 2765, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782,
               2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2237, 2750, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 1856, 1863, 1864, 2764, 2245, 2748,
               2547, 2548, 2555, 2556, 2557, 2558, 2559, 2886, 2893, 2900, 2901, 2902, 2903, 2910, 2911, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965,
               2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935,
               2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2984, 2982, 2983, 2988, 2989, 2990, 2991, 2993, 3002, 3001, 2997, 2998, 2999, 3000, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 2994, 2995, 2996, 1339, 1340, 1341, 1342,
               1343, 3017, 3025, 3026, 3029, 3032, 3033, 3034, 3035, 3036, 3037, 3040, 3041, 3038, 3039, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065,
               3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102,
               3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139,
               3140, 3141, 3142, 3143, 3144, 3145, 3146, 3152, 3150, 3151, 3153, 3154, 17, 282, 490, 594, 1684]

TOU_AS_GROUP = [390, 392, 409, 410, 412, 413, 415]

AWARDS_TOU_LIST = [1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1434]

NOT_NEED_WIKIMERGE  = set(TOU_SKIP_LIST + TOU_AS_GROUP + AWARDS_TOU_LIST)

WOMEN_BASKETBALL_LIST = (17347, 17365, 17366, 17367, 17368, 17369, 17370, 17371, 17372, 17374, 17375, 17376, 17377, 17378, 17379, 17380, 17381, 17384, 17385, 17387, 17388, 17389, 17390, 17391, 17392, 17393, 17394, 17395, 17396, 17397, 17399, 17400, 17401, 17402, 17403, 17404, 17405, 17406, 17407, 17409, 17410, 17411, 17412, 17413, 17414, 17415, 17416, 17418, 17419, 17420, 17421, 17422, 17423, 17424, 17425, 17426, 17427, 17428, 17429, 17430, 17431, 17432, 17433, 17434, 17435, 17436, 17437, 17438, 17439, 17440, 17441, 17442, 17443, 17444, 17445, 17446, 17447, 17448, 17449, 17450, 17451, 17453, 17454, 17455, 17456, 17457, 17458, 17460, 17461, 17462, 17463, 17464, 17465, 17466, 17467, 17469, 17470, 17471, 17473, 17474, 17475, 17476, 17477, 17478, 17479, 17480, 17482, 17483, 17484, 17485, 17488, 17489, 17490, 17491, 17492, 17493, 17494, 17495, 17496, 17497, 17498, 17499, 17500, 17501, 17502, 17503, 17504, 17505, 17506, 17508, 17509, 17510, 17511, 17512, 17513, 17514, 17515, 17516, 17517, 17518, 17519, 17520, 17521, 17522, 17523, 17524, 17525, 17526, 17527, 17528, 17529, 17530, 17531, 17532, 17533, 17534, 17536, 17537, 17538, 17539, 17540, 17541, 17542, 17543, 17544, 17545, 17546, 17547, 17548, 17549, 17550, 17551, 17552, 17553, 17554, 17555, 17556, 17557, 17559, 17560, 17561, 17562, 17563, 17564, 17565, 17566, 17567, 17569, 17570, 17571, 17572, 17573, 17574, 17575, 17576, 17577, 17578, 17579, 17580, 17581, 17582, 17583, 17584, 17585, 17586, 17587, 17588, 17589, 17590, 17591, 17592, 17593, 17595, 17596, 17597, 17598, 17599, 17600, 17601, 17602, 17603, 17604, 17605, 17606, 17607, 17608, 17609, 17610, 17611, 17612, 17613, 17614, 17615, 17616, 17617, 17618, 17619, 17620, 17621, 17622, 17623, 17625, 17626, 17627, 17628, 17629, 17630, 17631, 17633, 17634, 17635, 17636, 17637, 17638, 17639, 17640, 17641, 17642, 17643, 17644, 17645, 17646, 17647, 17648, 17649, 17650, 17651, 17652, 17653, 17654, 17655, 17656, 17657, 17658, 17659, 17660, 17661, 17662, 17663, 17664, 17665, 17666, 17667, 17668, 17669, 17670, 17671, 17672, 17673, 17674, 17675, 17676, 17677, 17678, 17679, 17680, 17681, 17682, 17683, 17684, 17685, 17686, 17687, 17688, 17689, 17690, 17691, 17692, 17693, 17694, 17695, 17696, 17697, 17698, 17699, 17700, 17701, 17702, 17703, 17704, 17705, 17706, 17707, 17709, 17710, 17711, 17386, 17398, 17408, 17452, 17535, 17558, 17624, 17632, 17568, 53106, 53107, 53108, 54235, 120336, 120344, 120345, 120346, 120347, 120348, 120349, 120350, 120351, 120352, 120353, 120354, 120355, 120356, 120357, 120358, 120359, 120360, 120361, 120362, 120363, 120364, 120368, 120369, 120382, 120385, 120387, 120388, 120389, 120390, 120392, 120393, 120394, 120395, 120396, 120397, 120398, 120399, 120400, 120311, 120332, 120333, 120334, 120335, 120728, 120727, 120698, 120736, 120737, 120734, 120735, 120741, 120744, 120745, 120746, 120747, 120733, 120750, 120751, 120752, 120874, 120754, 120877, 120913, 120973, 121231, 121232, 121233, 121234, 121235, 121236, 121237, 121238, 121239, 121240, 121241, 121242, 121243, 121244, 121245, 121246, 121247, 121182, 121183, 121230, 120935, 121181, 120930, 120931, 120932, 120933, 120934, 120937, 120936)

WOMEN_HOCKEY_LIST = (32723, 32718, 32719, 32720, 32721, 32722, 32681, 32680, 32676, 32678, 32679, 32724, 32725, 32726, 32727)

HOCKEY_TEAM_LIST  = (94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 118, 120, 121, 122, 124, 126, 127, 128, 129, 130, 131, 134, 135, 137, 138, 139, 143, 144, 146, 148, 149, 150, 151, 152, 153, 155, 160, 162, 142, 161)

FIELD_HOCKEY_LIST = (31671, 31674, 31678, 31681, 31691)

MISC_SOCCER_LIST  = (290, 740, 869, 20203, 31290, 20137)

MISC_TEAM_LIST_LIST = (32799, 32797, 32798, 329, 331, 32773, 1218, 17353, 1059, 17346, 17353, 20, 63, 17358, 32822, 17355, 40399, 49056, 49161, 49162, 20176, 53249, 53229, 53731, 53095, 53096, 53105, 53207, 53224, 53252, 53073, 54144, 54145, 54146, 54147, 54149, 54150, 54151, 54030, 54139, 54140, 54141, 54142, 54143, 53074, 54405, 54477, 54482, 54431, 54501, 54510, 54511, 54386, 54460,54375,54376, 102998, 102999, 103000, 103002, 103003, 103004, 103005, 103008, 103010, 103011, 103012, 103013, 103014, 103015, 103016, 103024, 103032, 103139, 103406, 100286, 100287, 100288, 100289, 100290, 100291, 100292, 100293, 100294, 100295, 100296, 100297, 100298, 100299, 100300, 100301, 100302, 100303, 100304, 100305, 100306, 101331, 100308, 100309, 100310, 100311, 100312, 100313, 100314, 100315, 100316, 100317, 100318, 100319, 100320, 100321, 100322, 100323, 100324, 100325, 100326, 100327, 102997, 103001, 101361, 100874, 100875, 100876, 100877, 100878, 100879, 100880, 100881, 100882, 100883, 100884, 100885, 100886, 100887, 100888, 100889, 100902, 100912, 101117, 67369, 67370, 63, 347, 348, 55796, 95090, 103903, 103904, 99834, 99836, 99843, 99860, 99861, 99862, 99863, 99864, 99865, 99866, 99867, 99868, 99869, 99870, 99871, 99872, 99873, 99874, 99875, 99945, 99946, 99947, 99948, 99949, 99950, 99951, 99952, 99953, 100051, 100052, 100056, 100057, 100112, 100113, 100116, 94354, 95031, 95032, 95042, 95052, 95143, 95144, 95145, 95173, 95762, 99130, 99131, 99135, 99136, 99137, 99138, 99139, 99139, 99140, 99141, 99142, 99143, 99144, 99145, 101335, 101332, 101326, 110603, 110605, 118307, 118308, 118309, 118357, 118419, 118420, 118421, 118432, 118440, 118439, 118438, 118437, 118436, 118435, 118434, 118433, 118306, 118305, 100680, 118387, 118384, 120753, 121898, 121899, 121900, 121901, 121902, 121903, 121904, 121905, 121906, 121907, 121908, 121909, 121910, 121911, 121912, 121913, 121914, 121915, 121916, 121917, 132421, 132422, 133611, 133519, 133520, 133521, 133522, 133523, 133524, 133746, 134458, 134459)

TEAMS_AS_GROUP_LIST = (677, 688, 60, 61)

CURLING_TEAM_LIST = (50919, 50920, 50921, 50922, 50923, 50924, 50925, 50926, 50927, 50928, 50929, 50930, 50931, 50932, 50933, 50934, 50936, 50937, 50938, 50939)

PLACE_HOLDER_TEAM_LIST = (40395, 40396, 40397, 40398, 50758, 50759, 51038, 51039, 51058, 51059)

COLLEGE_FOOTBALL_TEAM_LIST = (138783, 136736, 136737, 137705, 138771, 138772, 138773, 138774, 138775, 138776, 138777, 138778, 138779, 138780, 138781, 138782, 136735, 138784, 138785, 138786, 138787, 138788, 138789, 138790, 138791, 138792,
        138793, 138794, 138795, 138796, 138797, 138798, 138799, 138800, 138801, 138802, 138803, 138804, 138805, 138806, 138807, 138808, 138809, 138810, 138811, 138812, 138813, 138814, 138815, 138895, 138896, 138897, 138898, 138899, 138900,
        138901, 138902, 138903, 138904, 138905, 138906, 138912, 138913, 138914, 138915, 138916, 138917, 138918, 138919, 138920, 138921, 138922, 138923, 138924, 138925, 138926, 138927, 138928, 138929, 138930, 138933, 138944, 138945, 138946,
        138947, 138948, 138949, 138950, 138951, 138952, 138953, 138954, 138955, 138956, 138960, 138963, 138965, 138966, 138967, 138968, 138969, 138970, 138971, 138972, 138973, 138974, 138975, 138976, 138977, 138978, 138979, 138980, 138981,
        138982, 138983, 138984, 138985, 138986, 138987, 138988, 138989, 138990, 138991, 138992, 138993, 138994, 138995, 138996, 138997, 138998, 138999, 139000, 139001, 139002, 139003, 139004, 139005, 139006, 139007, 139008, 139009, 139010,
        139011, 139012, 139013, 139014, 139015, 139016, 139017, 139018, 139019, 139020, 139021, 139022, 139023, 139024, 139025, 139026, 139027, 139028, 139029, 139030, 139031, 139032, 139033, 139034, 139035, 139036, 139037, 139038, 139039,
        139040, 139041, 139042, 139043, 139044, 33945, 33946, 33947, 33948, 33950, 33951, 33952, 33953, 33954, 33955, 33956, 33958, 33959, 33961, 33962, 33963, 33964, 33965, 33966, 33967, 33968, 33969, 33970, 33971, 33973, 33974, 33975, 33976, 33978, 33979, 33980, 35163, 35162, 35161, 35160, 35159, 581, 45058, 61607, 61608, 61609, 61610, 61611, 61612, 61613, 61614, 61615, 61620, 61621, 61622, 61623, 61626, 61627, 61628, 61631, 61632, 61633, 61634, 61635, 61636, 61637, 61638, 61639, 67784, 61642, 61643, 61644, 61645, 61646, 61647, 61649, 61650, 61652, 61653, 61654, 61655, 61657, 61658, 61659, 61660, 61663, 61664, 61665, 61666, 61667, 61668, 61669, 61670, 61671, 61673, 61674, 61675, 61676, 61677, 61680, 61681, 61683, 61684, 61685, 61686, 61687, 61688, 61689, 61690, 61691, 61695, 61696, 61697, 61698, 61699, 61700, 61701, 61702, 61703, 61704, 61706, 61707, 61709, 61710, 61711, 61713, 61714, 61715, 61716, 61717, 61718, 61719, 61720, 61722, 61723, 61724, 61725, 61726, 61728, 61729, 61732, 61733, 61734, 61735, 61737, 61738, 61739, 61740, 61741, 61742, 61743, 61744, 61746, 61748, 61751, 61752, 61753, 61754, 61755, 61757, 61758, 61760, 61762, 61764, 61765, 61766, 61767, 61768, 61770, 61771, 61772, 61773, 61774, 61776, 61778, 61779, 61780, 61781, 61782, 61784, 61785, 61786, 61789, 61790, 61791, 61793, 61794, 61795, 61796, 61798, 61799, 61801, 61802, 61803, 61805, 61806, 61807, 61809, 61810, 61812, 61813, 61814, 61816, 61817, 94271, 61821, 61822, 61823, 61824, 94272, 61826, 61827, 61829, 61830, 61831, 61832, 61833, 61835, 61836, 61837, 61838, 61840, 61841, 61842, 61843, 61844, 61845, 61846, 61847, 61849, 61850, 61851, 61854, 61855, 61857, 61859, 61860, 61861, 61862, 61863, 61864, 61865, 61866, 61867, 61869, 61870, 61871, 61872, 61873, 61874, 61875, 436, 61877, 61878, 61879, 61881, 61882, 61884, 61886, 61887, 61888, 61890, 61891, 61892, 61893, 61894, 61895, 61896, 61898, 61899, 61901, 61902, 61903, 61906, 61907, 61909, 61910, 61912, 61913, 61914, 61915, 61916, 61917, 61918, 68005, 61920, 61921, 61922, 61923, 61924, 61926, 61928, 61930, 61931, 61932, 61934, 61935, 61937, 61938, 61939, 61944, 67668, 61947, 61948, 68010, 61950, 67669, 61952, 61953, 61955, 61956, 61957, 61958, 61960, 61961, 61962, 61964, 61965, 61966, 61967, 61969, 61970, 61972, 68014, 61974, 61975, 61976, 61978, 61979, 61980, 541, 61982, 61985, 61986, 61990, 68017, 61992, 61996, 61997, 61998, 62000, 62003, 62004, 62005, 62008, 62009, 62010, 62011, 62013, 62014, 68021, 62017, 62018, 62020, 62021, 62022, 62025, 62026, 62027, 62028, 62030, 68024, 62035, 62037, 62038, 62039, 62040, 68008, 62045, 62048, 62049, 62052, 375, 61457, 61462, 61104, 61475, 61477, 61481, 61482, 61483, 61490, 61493, 61495, 61497, 61500, 61503, 61504, 61106, 60565, 61641, 61815, 61099, 61763, 61788, 61787, 61825, 61876, 96690, 96691, 61936, 534, 61981, 62055, 62059, 62061, 62062, 62063, 61062, 61064, 61065, 61067, 67214, 61074, 61076, 61079, 61080, 61081, 61082, 61083, 61086, 61087, 61090, 61091, 61095, 61096, 61097, 682, 61100, 61101, 61102, 61103, 61105, 61107, 61108, 61109, 61110, 61113, 61114, 61120, 61126, 61127, 61129, 61128, 61908, 61111, 61112, 61075, 61077, 95169, 61089, 61094, 61098, 61463, 61464, 61465, 61470, 61473, 61480, 61485, 61486, 61487, 61488, 61489, 61492, 61494, 61496, 61498, 61499, 61501, 98376, 98379, 61460, 67715, 61606, 61616, 61617, 61618, 61624, 61629, 61630, 61648, 61651, 61656, 61661, 61662, 61819, 61672, 61678, 61679, 61682,61692, 61693, 61694, 61708, 61712, 61721, 61727, 61731, 61736, 61745, 61747, 61749, 61750, 61759,61761, 61777, 61783, 61797, 61804, 61808, 61811, 61818, 61834, 61848, 61852, 61853, 61856, 61858, 61868, 61883, 61885, 61889, 61900, 61905, 468, 61911, 61984, 61988, 61993, 61994, 61999, 62001, 62002, 496, 62006, 61963, 62024, 62023, 62050, 62031, 62032, 611, 62036, 62042, 62041, 62044, 62047, 62051, 62056, 62060, 515, 61971, 630, 61121, 61066, 61068, 61070, 61977, 62064, 61116, 61118, 61119, 61123, 61124, 61995, 94989, 94993, 95000, 61063, 61775, 61071, 62016, 678, 62019, 61987, 98633, 61800, 61897, 62029, 61954, 61946, 592, 61925, 61927, 61933, 61941, 61943, 61959, 61069, 61122, 61125, 513, 61929, 103475, 103897, 103898, 103899, 103901, 103902, 104558, 104590, 104591, 104592, 104593, 104594, 104602, 105628, 105629, 113899, 115512, 120309)

COLLEGE_BASKETBALL_TEAM_LIST = (94270,  94273, 94274, 94275, 94277, 94278, 94283, 94284, 94285, 94294, 94295, 94296, 94297, 94298, 94314, 94315, 94325, 94326, 94327, 94328, 94329, 94330, 96433, 94388, 94389, 94465, 94475, 94483, 94502, 94269, 67527, 95018, 95019, 95021, 95022, 95023, 95024, 95026, 95027, 95071, 95088, 95089, 95133, 95135, 95136, 95137, 95138, 95155, 95156, 94369, 95236, 95266, 95278, 95279, 95280, 95281, 95368, 95372, 95373, 95087, 67805, 95880, 95881, 67371, 67372, 67373, 67374, 67375, 67376, 67377, 67378, 96066, 96067, 67407, 67408, 67409, 96082, 67416, 67417, 67418, 67419, 67420, 67421, 67422, 67426, 67427, 67428, 67429, 67430, 67431, 67432, 67433, 67434, 67435, 67436, 67437, 67438, 67439, 67440, 67442, 67443, 67444, 67445, 67446, 67447, 67448, 67449, 67450, 67451, 67452, 67453, 67454, 67468, 67469, 67470, 67471, 67472, 67475, 67477, 67478, 67479, 67480, 67481, 67482, 67483, 67484, 67485, 67487, 67488, 67490, 67491, 67492, 67493, 67494, 67495, 67496, 67497, 67498, 67499, 67500, 67501, 67502, 67503, 67504, 67506, 67507, 67508, 67509, 67510, 67511, 67512, 67513, 67514, 67515, 67516, 67517, 67518, 67519, 67520, 67521, 67522, 67523, 67524, 67525, 67526, 67528, 67529, 67530, 67531, 67532, 67533, 67534, 67535, 67536, 67537, 67538, 67539, 67540, 67541, 67542, 67543, 67544, 67545, 67546, 67548, 67549, 67550, 67551, 67552, 67553, 67554, 67556, 67557, 67560, 67561, 67563, 67564, 67565, 67566, 67567, 67568, 67569, 67570, 67571, 67572, 67573, 67574, 67575, 67576, 67577, 67578, 67580, 67581, 67582, 67583, 67584, 67585, 67586, 67587, 67588, 67589, 67590, 67591, 67592, 67593, 67615, 67618, 67619, 67620, 67622, 96310, 67666, 67667, 67670, 67697, 67699, 67700, 67701, 67702, 67703, 67706, 67707, 67708, 67709, 67710, 67711, 67712, 67713, 67714, 67716, 67717, 67718, 67719, 67720, 67721, 67723, 67724, 67725, 67727, 67728, 67729, 67730, 67731, 67732, 67733, 67734, 67735, 67736, 67737, 67738, 67739, 67740, 67741, 67742, 67743, 67744, 67745, 67746, 67747, 67748, 67749, 67750, 67751, 67752, 67753, 67754, 67755, 67757, 96430, 67760, 67761, 67763, 67766, 67767, 67768, 67770, 67771, 67772, 67773, 67774, 67775, 67776, 67777, 67778, 67779, 67780, 67781, 67782, 67783, 67785, 67786, 67787, 67788, 67789, 67790, 67791, 67792, 67793, 67794, 67795, 67796, 67797, 67798, 67802, 67803, 67807, 67808, 67809, 67810, 67811, 67812, 67813, 67814, 67815, 67816, 67817, 67818, 67819, 67820, 67822, 67826, 67827, 67828, 67829, 67830, 67831, 67832, 67833, 67834, 67835, 67836, 67837, 67838, 67839, 67840, 67841, 67842, 67847, 67848, 67849, 67850, 67852, 67853, 67854, 67855, 67856, 67857, 67858, 67859, 67860, 67861, 67862, 67863, 67864, 67865, 67866, 67867, 67868, 67869, 67870, 67871, 67872, 67873, 67979, 67980, 67981, 67982, 67983, 67984, 67985, 67986, 67987, 67988, 67989, 67990, 67991, 67992, 67993, 67994, 67995, 67996, 67997, 67998, 67999, 68000, 68001, 68002, 68003, 68004, 68006, 68007, 68011, 68012, 68013, 68015, 68016, 68018, 68020, 68022, 68023, 68025, 68026, 68027, 68028, 68030, 68031, 68032, 68034, 68035, 68036, 68037, 68038, 68039, 68009, 68029, 68033, 68302, 68304, 67423, 67424, 81285, 81461, 61059, 61060, 81625, 67547, 94029, 94030, 94031, 94032, 94033, 94034, 94035, 94036, 94037, 94038, 94039, 94040, 94041, 94042, 94043, 94044, 94045, 94046, 94047, 94048, 94049, 94050, 67559, 94062, 94063, 94064, 94065, 94080, 94081, 94082, 94083, 94084, 94085, 94086, 94087, 94088, 94089, 94090, 94091, 94093, 94100, 94159, 94160, 94161, 94162, 94163, 94164, 94165, 94166, 94167, 67579, 94368, 67762, 96749, 94276, 94028, 96762, 94313, 95369, 95086, 67756, 67764, 60615, 67759, 98518, 67801, 60636, 67806, 67821, 67823, 67825, 60628, 67799, 67489, 95020, 67722, 67726, 67425, 67696, 94092, 67476, 67824, 67758, 67441, 67555, 67558, 67562, 60629, 120324, 120325, 120326, 120327, 120328, 120329, 120330, 120331, 120337, 120338, 120339, 120340, 120341, 120342, 120343, 120371, 120373, 120374, 120375, 120376, 120377, 120378, 120379, 120380, 120381, 120383, 120384, 120386, 120391, 120401, 120402, 120403, 120404, 120405, 120407, 120409, 120413, 120418, 120419, 120422, 100435, 100436, 100437, 100438, 100439, 120310, 120312, 120313, 120315, 120316, 120317, 120318, 120319, 120320, 120321, 120322, 120323, 120726, 120697, 120661, 120314, 120729, 120738, 120739, 120732, 120748, 120749, 120832, 120875, 120876, 120878, 120879, 120909, 120910, 120912, 120914, 120925, 120924, 121089, 121094, 120972, 120974, 121194, 121129, 121135, 121138, 121149, 121062, 121108, 121190, 121121, 121100, 121079, 121059, 121069, 121193, 120926, 120927, 120928, 120929, 121191, 121192, 120938, 121195, 121196, 121197, 121071, 121074, 121205, 121206, 121207, 121208, 121209, 121210, 121085, 121065, 121155, 122659, 122918, 136424, 136425, 136426, 136422, 136423)

NCAA_DIV_II_III_FOOTBALL_TEAMS = (518, 395, 531, 404, 661, 671, 416, 419, 548, 426, 428, 558, 690, 439, 442, 574, 450, 582, 583, 465, 471, 604, 608, 482, 615, 625, 631, 633, 635, 35159, 35160, 35161, 35162, 35163, 36151, 36152, 36153)

UEFA_SOCCER_TEAMS = (45203, 45205, 45217, 45218, 45228, 45266, 45278, 45309, 45339, 45567, 45568, 45572, 45575, 45578, 45579, 45587, 45589, 45591, 45594, 94530, 45573, 45101, 493, 95118, 367, 132465, 55348, 136445, 19892, 46, 19896, 96409, 95290, 95295, 103900, 31229, 100734, 100735)

CRICKET_TEAMS = (32773, 60693, 100429, 105324, 105326, 105330, 105331, 105332, 115513, 120191, 120740)

TEAM_MERGE_SKIP_LIST = WOMEN_BASKETBALL_LIST + WOMEN_HOCKEY_LIST + HOCKEY_TEAM_LIST + FIELD_HOCKEY_LIST + MISC_TEAM_LIST_LIST + MISC_SOCCER_LIST + NCAA_DIV_II_III_FOOTBALL_TEAMS + COLLEGE_FOOTBALL_TEAM_LIST + PLACE_HOLDER_TEAM_LIST + UEFA_SOCCER_TEAMS + TEAMS_AS_GROUP_LIST + CURLING_TEAM_LIST + COLLEGE_BASKETBALL_TEAM_LIST + CRICKET_TEAMS

EXCLUDED_IDS = set([24595])
TOU_RES_IGONORED_IDS = (399, 504, 593)

NCAA_TEAMS_13 = (524, 646, 493, 603, 493, 663, 352, 354, 400, 407, 420, 546,638, 657, 669, 675, 680, 684, 626, 387, 501, 572, 685, 536, 549, 693, 473, 568, 360, 371, 372, 379, 382, 390, 391, 393, 396, 411, 415, 433, 435, 452, 474, 487, 489, 497, 498, 506, 514, 516, 517, 522, 523, 526, 527, 556, 576, 594, 598, 617, 634, 641, 664, 667, 668, 686, 687, 689, 696, 698, 359, 401, 451,  537, 529, 472, 503, 559, 470, 434, 461, 656, 545, 674, 650, 485, 662, 540, 553, 356, 666, 622, 637, 500)

NCAA_TEAMS_14 = (400, 546, 638, 657, 675, 684, 387, 572, 603, 549, 536, 448, 560, 666, 524, 694, 622, 485, 540, 383, 553, 637, 356, 476, 646, 503, 700, 407, 693, 658, 385, 597, 501, 653, 422,  509, 411, 667, 523)

NCAA_TEAMS_15 = (638, 657, 572, 387, 549, 407)

NCAA_TEAMS_11 = (384, 389, 394, 409, 418, 447, 464, 467, 479, 480, 490, 491, 494, 495, 509, 511, 519, 525, 535, 536, 538, 549, 589, 605, 616, 623, 627, 651, 670, 32824, 434, 659, 552, 485, 400, 445, 501, 508, 572, 579, 597, 636, 640, 653, 656, 673, 32821, 559, 663, 550, 638, 359, 685, 32820, 437, 427, 361, 420, 669, 674, 530, 683, 386, 600, 593, 680, 598, 697)

NCAA_TEAMS_10 = (362, 378, 423, 483, 547, 552, 567, 595, 642, 480, 352, 479, 384, 613, 447, 1279, 511, 458, 409, 680, 464, 394, 495)

NCAA_TEAMS_2 = (32826, 626, 663, 658, 603, 470, 572, 412, 613, 385, 597, 437, 653, 469, 673, 407, 680, 354, 683, 367, 609, 386, 612, 491, 647, 648, 674, 693, 397, 434, 463, 495, 530, 605, 627, 669, 32823)

NCAA_TEAMS_1 = (431, 559, 480, 493, 672, 32823, 648, 569, 644, 457, 605, 627, 544, 353, 684, 546, 640, 374, 550, 638, 461, 1279, 359, 685, 647, 501, 656, 545, 549, 463, 361, 490, 536, 616, 445, 602, 422, 579, 669, 32821, 400, 397, 693, 508, 424, 674, 491, 530, 387, 509, 394, 586, 561, 495, 378, 358, 494, 525, 352, 384, 511, 636, 659, 670)

NCAA_TEAMS_3 = (427, 409, 618, 400, 536, 653, 32821, 358, 385, 469, 508, 546, 569, 597, 640, 648, 657)

NCAA_TEAMS_4 = (409, 536, 603, 612, 647, 663)

MAJOR_TEAM_LIST = ('Real Madrid C.F.', 'Manchester City F.C.', 'Manchester United F.C.', 'FC Barcelona', 'Arsenal F.C.')
   
TOU_WINNER_SKIP_LIST = (983, 984, 985, 986, 987, 988, 990, 991, 992, 213, 454, 455, 456, 577, 891, 928, 931, 981, 989, 589, 946, 948, 989, 993, 994, 949, 67, 585, 881, 882, 980, 982, 1244, 525, 2239, 2637)


OBSOLETE_TOURNAMENT = (4, 24, 239, 141, 186, 150,  76, 159, 190,  17,  51, 187, 160, 136, 902, 135, 147, 217, 154, 109, 115, 252, 185, 117, 219, 151, 116, 385, 184, 302, 126, 100, 178, 127, 291, 194, 181, 120, 131, 114, 207, 111,  54,  36, 211, 203, 308, 201, 532, 205, 210, 193, 155, 105, 137, 108, 134, 195, 553, 133, 119, 301, 901, 157, 140,  98, 145,  86, 143, 132, 513, 107, 202, 106, 5, 6, 18, 40, 43, 45, 47, 175, 226, 235, 238, 247, 257, 260, 265, 270, 282, 390, 392, 409, 410, 412, 413, 415, 1068, 83, 84, 189, 199, 309, 503, 533, 903, 36, 966, 970, 971, 1018, 533, 553, 903, 526, 513, 688, 1002, 169, 182, 183, 502, 517, 545, 1253, 1489, 1803, 1801, 1806, 1809, 1273, 1508, 287, 603, 873, 1016, 761, 703, 714, 649, 716, 715, 1005, 41, 164, 1866)

OBSOLETE_PARTICIPANTS = (357, 375, 402, 413, 436, 456, 468, 496, 513, 515, 534, 541, 557, 587, 596, 611, 630, 678, 682, 790, 20153, 714, 715, 19778, 20062, 20094, 20127, 20157, 20184, 20187, 20188, 20194, 32796, 19815, 19892, 20120, 239, 708,  717, 746, 793, 794, 830, 881, 900, 913, 19894, 20015, 20028, 20032, 20051, 20052, 20124, 20129, 20139, 20146, 20173, 20186, 20189, 20191, 31253, 31290, 32659, 1237, 19828, 19841, 20222, 33797, 20119, 20152, 20111, 20015, 20130, 917, 20077, 20089, 32631, 32638, 20185, 60563, 60564, 54659, 54660, 20100, 808, 17713, 19790, 19791, 19825, 19827, 19916, 19961, 31180, 94378, 45215, 45426, 45592, 56029, 45162, 45312, 96722, 96320, 33799, 96725, 96726)

CRICKET_EMPTY_MOM = (291688, 24782, 24790, 25056, 25057, 25058, 25059, 25060, 25061, 27434, 36040, 50646, 96243, 96244, 96247, 96250, 96245, 96246, 96248, 96249, 50646, 50647, 50648, 40871, 40648, 40667, 118473, 50639, 142098,134954,142097,480217,
        151427, 173069, 173070, 118465, 202267, 206262, 206258,213484, 200681, 200682, 200683, 112091, 200684, 216196, 112090, 112087, 200685, 200686, 223804, 112084, 232681, 243953, 243954, 243955, 243956, 243957, 243958, 243959, 226202,
        235030, 243963, 243964, 243965, 243966, 243967, 243968, 218799, 232687, 235031, 243969, 232688, 254422, 218800, 253388, 263570, 218811, 269002, 269003, 272379, 272380, 271753, 271754, 271755, 271756, 275987, 275988, 263576, 263577,
        234004, 234005, 281397, 281398, 234000, 234001, 234015,234016,291683,291685,291686,291687,543981,543982,543983,554716,543985,543986)

TWO_TOURNAMENT_GAMES = (680, 1029, 1030, 1049, 1054, 1052, 1028, 1107)


TBD_SKIP_LIST = (40399, 51039, 50759, 49056, 49162, 51059, 54375, 54376, 55010, 55011, 54964, 53074, 53073, 55950, 60692, 122905, 122906, 122903, 122904, 122901, 122902)

PL_SKIP_LIST = (62844,  62878,  63043,  63511,  63742,  63867,  63941,  63978,  64059,  64113,  64247,  64401,  64434,  64455,  64504,  64593,  65020,  65440,  65584,  65597,  65636,  65956,  66120,  66558,  66570,  66589,  66907,  98273,  98280, 111024, 111213, 111267, 111341, 111671, 111779, 111846, 112045, 112047, 112353, 131728)

TOU_TEAMS_SKIP_LIST = ('National Football League preseason', 'NHL Preseason', 'NBA Preseason', 'MLB Preseason',
                       'National Football League regular season', 'NHL Regular Season', 'NBA Regular Season', 'MLB Regular Season',
                       'Primera Divisió', 'Armenian Premier League', 'Azerbaijan Premier League', 'Albanian Superliga',
                       'Liga I', 'Ukrainian Premier League', 'Ekstraklasa',
                       'Belarusian Premier League', 'Premier League of Bosnia and Herzegovina', 'Cypriot First Division',
                       'Bulgarian A Football Group', 'Czech First League', 'Meistriliiga',
                       'Veikkausliiga', 'Umaglesi Liga', 'Faroe Islands Premier League',
                       'Israeli Premier League', 'Kazakhstan Premier League', 'Luxembourg National Division',
                       'Maltese Premier League', 'Moldovan National Division', 'Montenegrin First League',
                       'Latvian First League', 'Tippeligaen', 'Campionato Sammarinese di Calcio',
                       'Serbian SuperLiga',   'Slovak Super Liga', 'Slovenian PrvaLiga',
                       'Macedonian First Football League', 'Gibraltar Premier Division', 'A Lyga',
                       'Danish Superliga', 'Croatian First Football League', 'NIFL Premiership',
                       'Welsh Premier League', 'League of Ireland', 'Nemzeti Bajnokság I',
                       'Úrvalsdeild', 'Ecuadorian Serie A', 'Korisliiga')

MEDALS_DIFF = {'gold': -1, 'silver': 1, 'bronze': 0}

ROLES_LIST = ['Forward-Center', 'Guard', 'Forward-Guard', 'Forward', 'Midfielder', 'Center', 'Punter', 'Quarterback', 'Defender', 'Tackle', 'Cornerback', 'Wide receiver', 'Outside linebacker', 'Middle linebacker', 'Kicker', 'Inside linebacker', 'Long snapper', 'Tight end', 'Defensive end', 'Defensive tackle', 'Second baseman', 'Pitcher', 'Goalie', 'Left wing', 'Right wing', 'Prop', 'Running back', 'Offensive tackle', 'Fullback', 'Free safety', 'Defensive back', 'Strong safety', 'Goalkeeper', 'Right fielder', 'First baseman', 'Third baseman', 'Left fielder', 'Center fielder', 'Catcher', 'Shortstop', 'Designated hitter', 'Outside back', 'Head coach', 'Right-handed', 'Hooker', 'Wicket-keeper', 'Five-eighth', 'Second-row', 'Attacker', 'Back row', 'Lock', 'Point guard', 'Half-back', 'Offensive guard', 'Bowler', 'All-rounder', 'Batsman', 'Middle-order batsman', 'Top-order batsman', 'Utility', 'Safety', 'Linebacker', 'Opening batsman', 'Defensive linemen', 'Slotbacks', 'Offensive line', 'Left-handed', 'Ambidextrous', 'Shooting guard', 'Small forward', 'Striker', 'Defense', 'Backfield', 'Centre half', 'Offence', 'Centre forward', 'Central defence', 'Left half', 'Right middle', 'Backgrounder', 'Outfielder', 'Placekicker', 'Probable', 'Defensive line', 'Scrum-half', 'Flanker', 'Fly-half', 'Utility back', 'Infielder', 'Wing', 'Full-back', 'Utility forward', 'Power forward', 'Halfback', 'Center-Forward', 'Bullpen catcher', 'Centre back', 'Offensive center', 'Defenceman', 'Receiver', 'Center defender', 'Left back', 'Point forward', 'Kick returner', 'Cyclist', 'Shooter', 'Wrestler', 'Canoeist', 'Swimmer', 'Gymnast', 'Boxer', 'Athlete',   'Rower', 'Fencer', 'Sailor', 'Archer', 'Taekwondoin', 'Diver', 'Weight lifter']

BIG_LIST = []

date_now = date.today()
cur_date = date_now.strftime("%Y-%m-%d")


class DBSanity(VtvTask):
    def __init__(self):
        VtvTask.__init__(self)
        my_name 		= 'SPORTSDB_SANITY'
        self.OUT_DIR 		= os.path.join(self.system_dirs.VTV_DATAGEN_DIR, my_name)
        sports_mc_file_name 	= 'game.data'
        self.sports_mc_file 	= os.path.join(self.datagen_dirs.sports_data_dir, sports_mc_file_name)
        redis_data_filename 	= 'new_redis_live_scores.data'
        redis_data_dir 		= os.path.join(self.system_dirs.VTV_DATAGEN_CURRENT_DIR, 'new_live_scores_data')
        self.redis_data_file 	= os.path.join(redis_data_dir, redis_data_filename)
        print self.redis_data_file
        #self.participants_game_list = ('baseball', 'hockey', 'basketball', 'football', 'cricket', 'soccer', 'golf', 'tennis', 'motorsports', 'rugby', 'field hockey', 'cycling', 'women_cricket')
        self.participants_game_list = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '29', '11', '12')
        self.days_to_pick = 70
        self.each_game_details = {
            #each game/event    :  (no.of participants, [list of rounds for each team])

             '7'            :  (2, ['H1', 'final']),
             '2'        :  (2, ['Q1', 'Q2', 'Q3', 'Q4', 'final']),
             '1'          :  (2, ['I1', 'I2', 'I3', 'I4', 'I5', 'I6', 'I7', 'I8', 'I9' , 'E', 'H', 'final']),
             '6'           :  (2, ['overs', 'wicket']),
             '3'            :  (2, ['', '']),
             '9'           :  (5, ['', '']),
             '5'            :  (2, ['', '']),
             '13'       :  (2, ['', '']),
             '8'              :  (2, ['', '']),
        }

        self.tournaments_not_present_dates = {
            #each tournament/game    :  (start_date, end_date)

            'National Basketball Association' :  ('2013-06-22', '2013-10-05'),
            'National Hockey League'   :  ('2013-06-26', '2013-09-04'),
            'National Football League' :  ('2017-02-07', '2017-08-03'),
        }


    def get_sport_type(self, _id):
        self.open_cursor(mysql_ip, db_name)
        select_query = 'select title from sports_types where id = %s'
        self.cursor.execute(select_query % str(_id))
        sport_title = self.cursor.fetchone()
        if sport_title:
            sport_title = sport_title[0]
        else:
            sport_title = ''

        return sport_title

    def get_sports_tou_event(self):
        self.tou_event_val = {}
        self.new_tou_event_val = {}
        query = 'select tournament_id, event_id from sports_tournaments_events'
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            tournament_id, event_id = row
            self.tou_event_val[event_id] = tournament_id
        for k, v in self.tou_event_val.iteritems():
            self.new_tou_event_val.setdefault(v, []).append(k)
        #print self.new_tou_event_val


    def get_sports_events_dict(self):
        self.sports_event_dict = {}
        query = """select A.event_id, A.tournament_id, B.season_start, B.season_end from sports_tournaments_events A inner join sports_tournaments B on A.event_id = B.id where B.type = 'event' and season_start >= '2013-03-01'"""
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            event_id, tou_id, season_start, season_end = row
            self.sports_event_dict[event_id] = (tou_id, season_start, season_end)

    def get_null_event_check(self):
        self.event_check_dict = {}
        self.count_event_null_check = 0
        for key, values in self.sports_event_dict.iteritems():
            query = 'select A.id, A.gid, A.tournament_id, A.event_id from sports_games A where tournament_id = %s and game_datetime >= \'%s\' and game_datetime <= \'%s\'' % (values[0], values[1], values[2])
            self.cursor.execute(query)
            for row in self.get_fetchmany_results():
                id, gid, tou_id, event_id = row
                if tou_id != values[0] and event_id != key:
                    #print tou_id, values[0], event_id, key
                    self.count_event_null_check += 1

    def get_parent_list(self):
        self.parent_list         = []
        self.gidMap              = {}
        self.remain_parent_dict  = {}
        self.tournament_dict     = {}
        self.stadiums_dict       = {}
        self.tou_group_dict      = {}
        guid_merge_file          = os.path.join(self.datagen_dirs.sports_merge_data_dir, 'sports_to_wiki_guid_merge.list')
        guidloadGuidPairList(guid_merge_file, self.gidMap)
        merge_list = self.gidMap.keys()

        query = 'select id, gid, title from sports_tournaments'
        self.cursor.execute(query)

        for row in self.get_fetchmany_results():
            tou_id, gid, title = row
            self.tournament_dict[gid] = (tou_id, title)
            for key, values in self.new_tou_event_val.iteritems():
                if tou_id in values and key in THIRD_LEVEL_LIST:
                    del self.tournament_dict[gid]
            if gid in self.tournament_dict and tou_id in NOT_NEED_WIKIMERGE:
                del self.tournament_dict[gid]

        sports_gids = self.tournament_dict.keys()

        if sports_gids:
            non_wiki_merge_list = set(sports_gids) - set(merge_list)
            for tou_gid in non_wiki_merge_list:
                tou_id, title = self.tournament_dict.get(tou_gid, '')
                self.remain_parent_dict[tou_id] = title
        self.logger.info('Number of tournaments does not have wiki merge : %s'  % self.remain_parent_dict)


        def get_all_team_merge(self):
            self.all_team_merge = []
            self.all_team_merge_dict = {}
            self.team_dict = {}

            query = "select id, gid, title from sports_participants where participant_type = \'team\' and title not in ('TBD')"
            self.cursor.execute(query)

            for row in self.get_fetchmany_results():
                id, gid, title = row
                self.team_dict[gid] = (id, title)
                if id in TEAM_MERGE_SKIP_LIST:
                    del self.team_dict[gid]

            team_gids = self.team_dict.keys()

            if team_gids:
                team_non_wiki_merge_list = set(team_gids) - set(merge_list)
                for team_gid in team_non_wiki_merge_list:
                    team_id, title = self.team_dict.get(team_gid, '')
                    self.all_team_merge_dict[team_id] = title

            self.logger.info(('Number of teams does not have wiki merge : %s'  % self.all_team_merge_dict))

            #checking stadiums merge
            self.stadiums_list = {}
            query = 'select id, gid, title from sports_stadiums'
            self.cursor.execute(query)
            for row in self.get_fetchmany_results():
                stad_id, stad_gid, title = row
                self.stadiums_list[stad_gid] = (stad_id, title)

            stadiums_gids = self.stadiums_list.keys()
            if stadiums_gids:
                stadiums_non_wiki_merge_list = set(stadiums_gids) - set(merge_list)
                for stad_gid in stadiums_non_wiki_merge_list:
                    stad_id, title = self.stadiums_list.get(stad_gid, '')
                    self.stadiums_dict[stad_id] = title

            #if self.stadiums_dict:
            self.logger.info(('Number of stadiums does not have wiki merge : %s'  % self.stadiums_dict.keys()))
            self.sanity_list.append((len(self.stadiums_dict), 'Number of stadiums does not have wiki merge'))


            self.tou_group_list = {}
            query = 'select id, gid, group_name from sports_tournaments_groups'
            self.cursor.execute(query)
            for row in self.get_fetchmany_results():
                group_id, group_gid, title = row
                self.tou_group_list[group_gid] = (group_id, title)

            tou_group_gids = self.tou_group_list.keys()
            if tou_group_gids:
                group_non_wiki_merge_list = set(tou_group_gids) - set(merge_list)
                for group_gid in group_non_wiki_merge_list:
                    group_id, title = self.tou_group_list.get(group_gid, '')
                    self.tou_group_dict[group_id] = title

            #if self.tou_group_dict:
            self.logger.info(('Number of tournament groups does not have wiki merge : %s'  % self.tou_group_dict.keys()))
            self.sanity_list.append((len(self.tou_group_dict), 'Number of tournament groups does not have wiki merge'))

    def get_players_birthdate(self):
        self.missed_birth_list = []
        roster_query     = 'select player_id from sports_roster where player_id not in (79519, 93151, 79634, 79899, 268283, 268287) and status = "active" and team_id = %s'
        birth_date_query = 'select birth_date from sports_players where participant_id  not in (79519, 93151, 79634, 79899, 268283, 268287) and participant_id = %s' 
        query = 'select participant_id from sports_teams where tournament_id in (197, 240, 88, 35, 229, 562)'

        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            team_id = row[0]
            self.cursor.execute(roster_query, team_id)

            for pl_ids in self.get_fetchmany_results():
                pl_id = pl_ids[0]
                self.cursor.execute(birth_date_query, pl_id)
                birth_date = self.cursor.fetchone()
                if birth_date:
                    if 'None' in str(birth_date[0]):
                        self.missed_birth_list.append(pl_id)
                else:
                    self.missed_birth_list.append(pl_id)
        if self.missed_birth_list:
            self.logger.info(('Number of Major league players does not have birth_date : %s'  % self.missed_birth_list))
            self.sanity_list.append((len(self.missed_birth_list), 'Number of Major league players does not have birth_date'))


    '''
    def get_deleted_merge_gids_data(self):
        self.gidMap                        = {}
        self.player_merge_deleted_list     = []
        self.team_merge_deleted_list       = []
        self.tournament_merge_deleted_list = []
        self.stadiums_merge_deleted_list   = []

        template = 'Number of %s that are present in wiki merge, but not present in sports %s : %s'

        guid_merge_file  = os.path.join(self.datagen_dirs.sports_merge_data_dir, 'sports_to_wiki_guid_merge.list')
        guidloadGuidPairList(guid_merge_file, self.gidMap)
        merge_list = self.gidMap.keys()

        query = 'select gid from sports_participants where gid like \'%PL%\''
        self.player_merge_deleted_list, title = self.get_gid_merge_results(query, merge_list, gid_type = 'PL')
        if self.player_merge_deleted_list:
            self.sanity_list.append((len(self.player_merge_deleted_list), title))
            self.logger.info((template % ('players', 'participants', self.player_merge_deleted_list)))

        query = 'select gid from sports_participants where gid like \'%TEAM%\''
        self.team_merge_deleted_list, title = self.get_gid_merge_results(query, merge_list, gid_type = 'TEAM')
        if self.team_merge_deleted_list:
            self.sanity_list.append((len(self.team_merge_deleted_list), title))
            self.logger.info((template % ('teams', 'participants', self.team_merge_deleted_list)))

        query = 'select gid from sports_tournaments where gid like \'%TOU%\''
        self.tournament_merge_deleted_list, title = self.get_gid_merge_results(query, merge_list, gid_type = 'TOU')
        if self.tournament_merge_deleted_list:
            self.sanity_list.append((len(self.tournament_merge_deleted_list), title))
            self.logger.info((template % ('tournaments', 'tournaments', self.tournament_merge_deleted_list)))

        query = 'select gid from sports_stadiums where gid like \'%STAD%\''
        self.stadiums_merge_deleted_list, title = self.get_gid_merge_results(query, merge_list, gid_type = 'STAD')
        if self.stadiums_merge_deleted_list:
            self.sanity_list.append((len(self.stadiums_merge_deleted_list), title))
            self.logger.info((template % ('stadiums', 'stadiums', self.stadiums_merge_deleted_list)))

    def get_gid_merge_results(self, query, merge_list, gid_type):
        gids_list = []
        merge_gids = []
        table_dict = {'PL'  : ('players', 'participants'),
                      'TEAM': ('teams', 'participants'),
                      'TOU' : ('tournaments', 'tournaments'),
                      'STAD': ('stadiums', 'stadiums')}

        title = 'Number of %s that are present in wiki merge, but not present in sports %s' % table_dict.get(gid_type, '')

        for gid in merge_list:
            if gid_type in gid:
                merge_gids.append(gid)

        self.cursor.execute(query)
        for gid in self.get_fetchmany_results():
            gids_list.append(gid[0])

        missed_list = set(merge_gids) - set(gids_list)
        if missed_list:
            return missed_list, title
        else:
            return '', ''

    def get_wrong_game_name(self):
        template = 'Wrong game in sports %s : %s'
        sanity_template = 'Wrong game in sports %s'

        game_list = self.get_wrong_game_data('participants')
        if game_list:
            self.sanity_list.append((len(game_list), sanity_template % ('participants')))
            self.logger.info((template % ('participants', game_list)))

        game_list = self.get_wrong_game_data('games')
        if game_list:
            self.sanity_list.append((len(game_list), sanity_template % ('games')))
            self.logger.info((template % ('games', game_list)))

        game_list = self.get_wrong_game_data('tournaments')
        if game_list:
            self.sanity_list.append((len(game_list), sanity_template % ('tournaments')))
            self.logger.info((template % ('tournaments', game_list)))

        group_list = self.get_wrong_game_data('tournaments_groups')
        if group_list:
            self.sanity_list.append((len(game_list), 'Wrong group in sports tournaments groups'))
            self.logger.info(('Wrong group in sports tournaments groups : %s', group_list))
    '''

    def get_wrong_game_data(self, table_type):
        game_list            = []
        game_lowercase_list  = []
        if table_type == "tournaments_groups":
            query = 'select distinct BINARY group_type from sports_%s' % (table_type)
        else:
            query = 'select distinct BINARY game from sports_%s' % (table_type)

        self.cursor.execute(query)
        for game in self.get_fetchmany_results():
            game_list.append(game[0])

        for game in game_list:
            if table_type == "tournaments_groups":
                game_lowercase_list.append(game.title())
            else:
                game_lowercase_list.append(game.lower())

        diff_list = set(game_list) - set(game_lowercase_list)
        if diff_list:
            return diff_list
        else:
            return ''

    def get_all_tournament_participants(self):
        self.tournament_list = []
        query = "select id from sports_tournaments where type='tournament' and sport_id not in ('5', '10', '20', '45', '96', '15', '65', '9', '8')"
        tou_query = "select count(*) from sports_tournaments_participants where tournament_id= %s"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            self.cursor.execute(tou_query % (row[0]))
            for count in self.get_fetchmany_results():
                if count[0] == 0:
                    self.tournament_list.append(row[0])
        if self.tournament_list:
            title = 'Number of tournaments that are not present in sports_tournaments_participants'
            self.sanity_list.append((len(self.tournament_list), title))
            self.logger.info(('%s: %s'  % (title, self.tournament_list)))


    def get_sports_roster_val(self):
        self.roster_val = set()
        query = 'select player_id from sports_roster'
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            player_id = row[0]
            self.roster_val.add(player_id)

    def get_sports_tou_parti_val(self):
        self.tou_parti_val = set()
        query = "select participant_id from sports_tournaments_participants where participant_id in (select id from sports_participants where participant_type = 'player')"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            participant_id =  row[0]
            self.tou_parti_val.add(participant_id)

    def get_result_count(self, query, title, need_count = 0):
        self.cursor.execute(query)
        self.value_dict = []
        count = 0
        row = ''
        for row in self.get_fetchmany_results():
            if "group by sport_id" in query:
                count += row[1]
            else:
                count = row[0]
            self.value_dict.append(row)

        if need_count:
            if count != need_count:
                self.sanity_list.append((count, title))
                self.logger.info(('Query -- %s Title -- %s Values --- %s' % (query, title, self.value_dict)))
            else:
                self.sanity_list.append((0, title))
        else:
            if len(row) >= 2:
                self.sanity_list.append((count, title, self.value_dict))
            else:
                self.sanity_list.append((count, title))
            self.logger.info(('Query -- %s Title -- %s Values --- %s' % (query, title, self.value_dict)))

    def get_medals_count(self, query, title):
        self.cursor.execute(query)
        gold = silver = bronze = 0
        self.medals_dict = []
        count = 0
        for row in self.get_fetchmany_results():
            count = row[1]
            if row[0] == 'gold': 
                gold = row[1]
            elif row[0] == 'silver':
                silver = row[1]
            elif row[0] == 'bronze':
                bronze = row[1]
            self.medals_dict.append(row)

        if gold + MEDALS_DIFF.get('gold') ==\
               silver + MEDALS_DIFF.get('silver') ==\
               bronze + MEDALS_DIFF.get('bronze') or gold == 0:
            title = 'Number of gold, silver and bronze medals'
        self.sanity_list.append((count, title, self.medals_dict))

    def get_result_list_count(self, query, title):
        self.cursor.execute(query)
        count = 0
        self.value_dict = []
        for row in self.get_fetchmany_results():
            count += 1
            self.value_dict.append(row)
        self.sanity_list.append((count, title))
        self.logger.info(('Query -- %s Title -- %s Values --- %s' % (query, title, self.value_dict)))

    def get_check_result(self, query, title, checkval):
        self.cursor.execute(query)
        count = 0
        for row in self.get_fetchmany_results():
            if row[0] != checkval:
                count = row[0] - checkval
        self.sanity_list.append((count, title))

    def load_fbs(self):
        self.fbs_list = set()
        for line in open('fbs.txt'):
            line = line.strip()
            if not line:
                continue
            name = line.split('\t')[0].strip()
            self.fbs_list.add(name.lower())

    def load_fcs(self):
        self.fcs_list = set()
        for line in open('fcs.txt'):
            line = line.strip()
            if not line:
                continue
            name = line.strip()
            self.fcs_list.add(name.lower())

    def get_gid_wiki_list(self):
        status, process = ssh_utils.ssh_cmd_output(ip, self.vtv_username, self.vtv_password, 'cat %s' % SPORTS_MERGE_LIST_FILE)
        self.gid_wiki_list = {}
        if not status:
            maping_gids = process.__str__().replace('\r', '').split('\n')
            for maping_gid in maping_gids:
                if '<>' in maping_gid:
                    data = maping_gid.split('<>')
                    self.gid_wiki_list[data[1]] = data[0]
        else:
            self.gid_wiki_list = {}

    def get_tou_team_gids(self):
        self.tournament_wiki_gids = set()
        self.event_wiki_gids = set()
        self.team_wiki_gids = set()
        self.player_wiki_gids = set()
        self.group_wiki_gids = set()
        self.missing_images_ids = {}
        self.placeholder_images = 0

        query = "select gid from sports_tournaments where type = 'tournament' and affiliation != 'obsolete'"
        self.cursor.execute(query)
        tou_gids = self.cursor.fetchall()
        for tou_gid in tou_gids:
            self.tournament_wiki_gids.add(self.gid_wiki_list.get(tou_gid[0], tou_gid[0]))

        query = "select gid from sports_tournaments_groups"
        self.cursor.execute(query)
        group_ids = self.cursor.fetchall()
        for group_id in group_ids:
            self.group_wiki_gids.add(self.gid_wiki_list.get(group_id[0], group_id[0]))

        query = "select gid from sports_participants where participant_type = 'team'"
        self.cursor.execute(query)
        par_gids = self.cursor.fetchall()
        for par_gid in par_gids:
            self.team_wiki_gids.add(self.gid_wiki_list.get(par_gid[0], par_gid[0]))

        query = "select gid from sports_tournaments where type = 'event' and affiliation != 'obsolete'"
        self.cursor.execute(query)
        event_gids = self.cursor.fetchall()
        for event_gid in event_gids:
            self.event_wiki_gids.add(self.gid_wiki_list.get(event_gid[0], event_gid[0]))

        query = "select gid from sports_participants where participant_type = 'player'"
        self.cursor.execute(query)
        player_gids = self.cursor.fetchall()
        for player_gid in player_gids:
            self.player_wiki_gids.add(self.gid_wiki_list.get(player_gid[0], player_gid[0]))
        query = 'select count(*) from sports_participants where image_link in ("http://static.weltsport.net/bilder/spieler/gross/0.png", "http://www.mysportsnutrition.com/images/blank_face_placeholder.jpg") and participant_type = "player"'
        self.cursor.execute(query)
        players_missing_count = self.cursor.fetchone()
        if players_missing_count:
            self.placeholder_images = players_missing_count[0]

    def get_imagedb_gids(self):
        self.imagedb_gids = set()
        query = "select gid from gid_meta"
        self.image_cursor.execute(query)
        imagedb_gids = self.image_cursor.fetchall()
        for imagedb_gid in imagedb_gids:
            self.imagedb_gids.add(imagedb_gid[0])

    def get_improper_season(self):
        self.tou_count = OrderedDict([
                                  ('NCAA College Football', (9, 4)),
                                  ('National Basketball Association', (229, 7)),
                                  ('National Hockey League', (240, 7)),
                                  ('Major League Baseball',(88,4)),
                                  ('National Football League',(197,4)),
                                  ('Major League Soccer',(34,4)),
                                  ('Premier League',(35,7)),
                                  ('Danish Superliga',(562,7)),
                                  ('Korisliiga',(2905,7)),
                                  ('Campeonato Brasileiro Serie A',(573,4)),
                                  ('Ligue 1',(32,7)),
                                  ('Bundesliga',(33,7)),
                                  ('Liga MX',(586,7)),
                                  ('La Liga',(29,7)),
                                  ('Serie A',(579,7)),
                                  ('National Rugby League',(1825,4)),
                                  ('Super League',(2209,4)),
                                  ('Big Bash League',(2553,7)),
                                  ('Indian Premier League',(631,4)),
                                  ('Argentine Primera Division',(590,7)),
                                  ('Liga de Futbol Profesional Boliviano',(585,4)),
                                  ('Campeonato Nacional',(591,4)),
                                  ('Categoria Primera A',(572,4)),
                                  ('Ecuadorian Serie A',(589,4)),
                                  ('Paraguayan Primera Division',(595,4)),
                                  ('Peruvian Primera Division',(598,4)),
                                  ('Uruguay Primera Division',(596,4)),
                                  ('Venezuelan Primera Division',(597,4)),
                                  ])
        for tournament_name, values in self.tou_count.iteritems():
            query = 'select distinct(length(season)) from sports_roster where team_id in (select participant_id  from sports_tournaments_participants where tournament_id = %s) and status="active"' %values[0]
            self.cursor.execute(query)
            val = self.cursor.fetchone()[0]
            if int(val) != values[1]:
                title = "Length of the  %s season is wrong" %tournament_name
                self.sanity_list.append((int(val), title))
            elif not val:
                title = "Length of the  %s season is wrong" %tournament_name
                self.sanity_list.append((0, title))


    def get_roster_count(self):
        self.roster_count = OrderedDict([
                                  ('NCAA College Football', (9, 49)),
                                  ('National Basketball Association', (229, 30)),
                                  #('National Hockey League', (240, 30)),
                                  ('Major League Baseball',(88,30)),
                                  ('National Football League',(197,27)),
                                  ('Major League Soccer',(34,24)),
                                  ('Premier League',(35,19,'2018-19')),
                                  ('Danish Superliga',(562,14,'2019-20')),
                                  ('Korisliiga',(2905,11)),
                                  ('Campeonato Brasileiro Serie A',(573,21,'2018')),
                                  ('Ligue 1',(32,18,'2018-19')),
                                  ('Bundesliga',(33,18,'2016-17')),
                                  ('Liga MX',(586,17,'2018-19')),
                                  ('La Liga',(29,21,'2018-19')),
                                  ('Serie A',(579,18,'2018-19')),
                                  ('National Rugby League',(1825,16)),
                                  ('Super League',(2209,12)),
                                  ('Big Bash League',(2553,8)),
                                  ('Indian Premier League',(631,8)),
                                  ('Argentine Primera Division',(590,26,'2018')),
                                  ('Liga de Futbol Profesional Boliviano',(585,12,'2016-17')),
                                  ('Campeonato Nacional',(591,16,'2016-17')),
                                  ('Categoria Primera A',(572,21,'2018')),
                                  ('Ecuadorian Serie A',(589,11,'2018')),
                                  ('Paraguayan Primera Division',(595,12,'2019')),
                                  ('Peruvian Primera Division',(598,16,'2018')),
                                  ('Uruguay Primera Division',(596,13,'2018')),
                                  ('Venezuelan Primera Division',(597,21,'2018')),
                                  ])
   

        for tournament_name, values in self.roster_count.iteritems():
            #query = "select count(distinct(participant_id)) from sports_tournaments_results where tournament_id = %s and result_type = 'standings'" %values[0]
            query = 'select count(*) from sports_roster where team_id in (select participant_id  from sports_tournaments_participants where tournament_id = %s) and player_role ="Head Coach" and status = "active"' %values[0]
            if len(values) == 3:
                query += " and season='%s'" %values[2]
            self.cursor.execute(query)
            val = self.cursor.fetchone()
            if val and val[0] != values[1]:
                title = "Number of %s Head Coach count is different" %tournament_name
                self.sanity_list.append((val[0], title))
            elif not val:
                title = "Number of %s Head Coach  count is different" %tournament_name
                self.sanity_list.append((0, title))





    def get_standings_missing_count(self):
        self.groups_count = OrderedDict([ 
                           ('NFC', (1, 16)), ('NFC East', (2, 4)), ('NFC North', (3, 4)), ('NFC South', (4, 4)),
                           ('NFC West', (5, 4)), ('AFC', (6, 16)), ('AFC East', (7, 4)), ('AFC North', (8, 4)),
                           ('AFC South', (9, 4)), ('AFC West', (10, 4)),

                           ('NL', (26, 15,'2018')), ('NL East', (30, 5)), ('NL West', (32, 5)), ('NL Central', (31, 5)),
                           ('AL', (25, 15)), ('AL East', (27, 5)), ('AL West', (29, 5)), ('AL Central', (28, 5)),
         
                           ('NHL Eastern Conference', (36, 16)), ('NHL Western Conference', (39, 15)),
                           ('NHL Atlantic', (37, 8)), ('NHL Pacific', (41, 8)), ('NHL Central', (40, 7)),
                           ('NHL Metropolitan', (38, 8)),

                           ('NBA Eastern Conference', (43, 15)), ('NBA Western Conference', (44, 15)),
                           ('NBA Atlantic', (47, 5)), ('NBA Central', (49, 5)), ('NBA Southeast', (50, 5)),
                           ('NBA Northwest', (48, 5)), ('NBA Pacific', (45, 5)), ('NBA Southwest', (46, 5)),

                           ('America East Basketball', (83, 9)), ('American Athletic Basketball', (84, 12, '2017-18')),
                           ('Atlantic 10 Basketball', (85, 14)), ('ACC Basketball', (86, 16)),
                           ('Atlantic Sun Basketball', (87, 11)),('Big 12 Basketball', (88, 10)),
                           ('Big East Basketball', (89, 10)), ('Big Sky Basketball', (90, 12)),
                           ('Big South Basketball', (91, 12)),
                           ('Big Ten Basketball', (92, 14)), ('Big West Basketball', (93, 9)),
                           ('Colonial Athletic Association Basketball', (94, 10)), ('Conference USA Basketball', (95, 17)),
                           ('Division I Independents Basketball', (96, 1)), ('Horizon League Basketball', (97, 10,'2017-18')),
                           ('Ivy League Basketball', (98, 8)), ('MAAC Basketball', (99, 11)),
                           ('Mid-American Basketball', (100, 12)), ('MEAC Basketball', (101, 13)),
                           ('Missouri Valley Basketball', (102, 10, '2017-18')), ('Mountain West Basketball', (103, 11)),
                           ('Northeast Basketball', (104, 10)), ('Ohio Valley Basketball', (105, 12)),
                           ('Pac-12 Basketball', (106, 12)), ('Patriot League Basketball', (107, 10)),
                           ('SEC Basketball', (108, 14)), ('Southern Basketball', (109, 14)),
                           ('Southland Basketball', (110, 14)), ('SWAC Basketball', (111, 10)),
                           ('Summit League Basketball', (112, 9)), ('Sun Belt Basketball', (113, 12,'2017-18')),
                           ('West Coast Basketball', (114, 10)), ('WAC Basketball', (115, 9))
                        ])



        self.tournament_standings = OrderedDict([
                                   ('2014 Winter Olympics', (1281, 26)),
                                   ('NCAA College Football', (9, 49)),
                                   ('Test Cricket', (718, 10)), ('ODI Cricket', (721, 24)),  ('Twenty20 Cricket', (962, 22)),
                                   ('Asia Cup', (1479, 5, '2014')),
                                   ('National Basketball Association', (229, 30)), ('National Hockey League', (240, 31)),
                                   ('Major League Baseball',(88,30)),('National Football League',(197,32)),
                                   ("Australian Open Men's Singles", (837, 30)), ("Australian Open Women's Singles", (852, 31)),
                                   ('Camping World Truck Series', (53, 71, '2014')), ('Sprint Cup Series', (281, 56, '2014')),
                                   ('Nationwide Series', (50, 70, '2014')),

                                   ('La Liga', (29, 18, '2015-16')), ('Ligue 1', (32, 20, '2015-16')), ('Bundesliga', (33, 18, '2015-16')),
                                   ('Premier League', (35, 20, '2015-16')), ('Serie A', (579, 20, '2015-16')),('Major League Soccer',(34,23)),
                                   ('Danish Superliga',(562,14,'2016-17')),('Korisliiga',(2905,11, '2017-18')),('Campeonato Brasileiro Serie A',(573,20,'2017')),
                                   ('Liga MX',(586,18,'2018')),('National Rugby League',(1825,16,'2018')),('Super League',(2209,12,'2018')),
                                   ('Big Bash League',(2553,8)),('Indian Premier League',(631,8,'2018')),('Argentine Primera Division',(590,30,'2018-19')),
                                   ('Liga de Futbol Profesional Boliviano',(585,12,'2016-17')),('Campeonato Nacional',(591,16,'2016-17')),
                                   ('Categoria Primera A',(572,20,'2018')),('Ecuadorian Serie A',(589,12,'2018')),('Paraguayan Primera Division',(595,12,'2018')),
                                   ('Peruvian Primera Division',(598,16,'2018')),('Uruguay Primera Division',(596,16,'2018')),('Venezuelan Primera Division',(597,18,'2018')),

                               ])

        for group_name, values in self.groups_count.iteritems():
            query = "select count(distinct(participant_id)) from sports_groups_results where group_id = %s and participant_id not in (0)" %values[0]
            if len(values) == 3:
                query += " and season=%s" %values[2]
            self.cursor.execute(query)
            val = self.cursor.fetchone()
            if val and val[0] != values[1]:
                title = "Number of %s group standings participants count is different" %group_name
                self.sanity_list.append((val[0], title))
            elif not val:
                title = "Number of %s group standings participants count is different" %group_name
                self.sanity_list.append((0, title))

        for tournament_name, values in self.tournament_standings.iteritems():
            query = "select count(distinct(participant_id)) from sports_tournaments_results where tournament_id = %s and result_type = 'standings' and participant_id not in (0)" %values[0]
            if len(values) == 3:
                query += " and season=%s" %values[2]
            self.cursor.execute(query)
            val = self.cursor.fetchone()
            if val and val[0] != values[1]:
                title = "Number of %s standings participants count is different" %tournament_name
                self.sanity_list.append((val[0], title))
            elif not val:
                title = "Number of %s standings participants count is different" %tournament_name
                self.sanity_list.append((0, title))
                

    def get_teams_for_each_tournament(self):
                                #'title'                  : (team_count, tou_id, tou_start_date, tou_end_date, games_count, season, event_id),
                                #'ICC Cricket World Cup'  : (16, 220, 20110219, 20110402, 16),
                                #'Indian Premier League'  : (9,  631, 20130403, 20130526, 16),

        self.teams_for_each_tournament = OrderedDict([
                               ( 'National Football League'   , (32, 197, 20180906, 20190203, [16], "2019", '1010, 1074')),
                               ( 'National Football League preseason', (0,  197, 20170803, 20170831, [4],  "", '657' )),
                               ( 'National Hockey League'     , (31, 240, 20160920, 20170612, [82], "2018-19", '1079' )),
                               ( 'NHL Preseason'              , (0,  240, 20160920, 20161004, [6, 7, 8], "",  '656' )),
                               ( 'MLB Preseason'              , (0, 88,  20140225, 20140330, [1, 2, 3, 4, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "", '484' )),
                               ( 'Major League Baseball'      , (32, 88,  20190320, 20191030, [162], "2019", '1280' )),
                               ( 'National Basketball Association', (30, 229, 20161001, 20170618, [82], "2018-19",  '1078' )),
                               ( 'NBA Preseason'              , (0,  229, 20131005, 20131025, [6, 7, 8], "",   '658' )),
                               ( "Women's National Basketball Association" , (12, 223, 20190524, 20190908, [34], "2019",  '223' )),
                               ( 'Major League Soccer'        , (24, 34,  20190302, 20191110, [34], "2019", '1284' )),

                               ( 'Albanian Superliga'         , (10, 1172, 20150821, 20160523, [36],  "2015-16", '1172')),
                               ( 'Armenian Premier League'    , (9,  1174, 20150731, 20160529, [27, 28],  "2018-19", '1174')),
                               ( 'Austrian Football Bundesliga', (12, 557,  20150725, 20160516, [36],  "2018-19", '557')),
                               ( 'Azerbaijan Premier League'  , (8, 1175, 20150808, 20160522, [36],  "2018-19", '1175')),
                               ( 'Belarusian Premier League'  , (16, 1176, 20150410, 20151130, [32, 26],  "2015", '1176')),
                               ( 'Belgian First Division A'         , (16, 558,  20150724, 20160530, [30, 33, 36, 38, 40],  "2019-20", '558')),
                               ( 'Premier League of Bosnia and Herzegovina', (12, 1177, 20150725, 20160515,[15, 30], "2015-16", '1177')),
                               ( 'Bulgarian A Football Group'     , (14, 1178, 20150716, 20160530, [32,36],  "2015-16", '1178')),
                               ( 'Croatian First Football League' , (10, 1102, 20150709, 20160515, [36],  "2015-16", '1102')),
                               ( 'Cypriot First Division'     , (14, 1179, 20150821, 20160303, [26, 27, 36, 22],  "2015-16", '1179')),
                               ( 'Czech First League'         , (16, 1180, 20150723, 20160515, [30],  "2015-16", '1180')),
                               ( 'Danish Superliga'           , (14, 562,  20150717, 20160530, [33],  "2019-20", '562')),
                               ( 'Eredivisie'                 , (18, 564,  20150807, 20160509, [34, 36],  "2019-20", '564')),
                               ( 'Premier League'             , (20, 35,   20160813, 20170521, [38],  "2018-19", '35')),
                               ( 'Meistriliiga'               , (10, 1181, 20150306, 20151108, [36],  "2015", '1181')),
                               ( 'Faroe Islands Premier League', (10, 1182, 20150301, 20151004, [27],  "2015", '1182')),

                               ( 'Veikkausliiga'              , (12, 1183, 20190403, 20190901, [33,27],  "2019", '1183')),
                               ( 'Ligue 1'                    , (20, 32,   20160812, 20170520, [38],  "2018-19", '32')),
                               ( 'Umaglesi Liga'              , (10, 1185, 20150812, 20151213, [22, 15],  "2015-16", '1185')),
                               ( 'Bundesliga'                 , (18, 33,   20160826, 20170520, [34],  "2019-20", '33')),
                               ( 'Gibraltar Premier Division' , (10,  1186, 20150924, 20151130, [18, 9, 8, 7, 14, 21],  "2015-16", '1186')),
                               ( 'Superleague Greece'         , (16, 576,  20150821, 20160430, [34, 40, 33, 30],  "2017-18", '576')),
                               ( 'Nemzeti Bajnoksag I'        , (12, 1202, 20150718, 20160508, [30, 33],  "2018-19", '1202')),
                               ( 'League of Ireland'          , (12, 1100, 20150305, 20151101, [33],  "2015", '1100')),
                               ( 'Israeli Premier League'     , (14, 1187, 20150821, 20160306, [26],  "2015-16", '1187')),
                               ( 'Serie A'                    , (20, 579,  20160820, 20170528, [38],  "2018-19", '579')),
                               ( 'Kazakhstan Premier League'  , (12, 1188, 20150306, 20151122, [32],  "2015", '1188')),
                               ( 'Latvian First League'       , (15, 1189, 20150312, 20151108, [36, 28],  "2015", '1189')),
                               ( 'Luxembourg National Division', (14, 1190, 20150731, 20160523, [26],  "2015-16", '1190')),
                               ( 'A Lyga'                     , (8, 1199, 20150227, 20151130, [36],  "2015", '1199')),
                               ( 'Maltese Premier League'     , (14, 1191, 20150820, 20160215, [22],  "2015-16", '1191')),
                               ( 'Moldovan National Division' , (8, 1192, 20150720, 20160313, [22, 18],  "2015-16", '1192')),
                               ( 'Montenegrin First League'   , (10, 1193, 20150801, 20151230, [22, 33, 17],  "2015-16", '1193')),
                               ( 'Macedonian First Football League' , (10, 1184, 20140802, 20150301, [18],  "2015-16", '1184')),
                               ( 'NIFL Premiership'           , (12, 587,  20140809, 20150328, [33, 38, 39],  "2015-16", '587')),
                               ( 'Tippeligaen'                , (16, 1194, 20140328, 20141109, [30],  "2016", '1194')),
                               ( 'Ekstraklasa'                , (16, 1108, 20140718, 20150429, [30],  "2015-16", '1108')),
                               ( 'Primeira Liga'              , (18, 588,  20180811, 20190519, [34],  "2018-19", '588')),
                               ( 'Liga I'                     , (14, 1106, 20150709, 20160530, [34, 26],  "2015-16", '1106')),
                               ( 'Russian Premier League' , (16, 599,  20140801, 20150530, [30],  "2019-20", '599')),
                               ( 'Campionato Sammarinese di Calcio', (15, 1195, 20130913, 20140413, [20, 21],  "2015-16", '1195')),
                               #( 'Scottish Premier League'    , (12, 606,  20140809, 20150524, [33, 38],  "2018-19", '606')),
                               ( 'Serbian SuperLiga'          , (16, 1196, 20140809, 20150530, [30],  "2015-16", '1196')),
                               ( 'Slovak Super Liga'          , (12, 1197, 20140711, 20150530, [33],  "2015-16", '1197')),
                               ( 'Slovenian PrvaLiga'         , (10, 1198, 20190713, 20200515, [36],  "2019-20", '1198')),
                               ( 'La Liga'                    , (20, 29,   20160819, 20170521, [38],  "2019-20", '29')),
                               ( 'Allsvenskan'                , (16, 611,  20190331, 20191102, [30],  "2019", '611')),
                               ( 'Swiss Super League'         , (10, 612,  20140719, 20150607, [36],  "2016-17", '612')),
                               ( 'Super Lig'                  , (18, 613,  20140719, 20150607, [34],  "2015-16", '613')),
                               ( 'Ukrainian Premier League'   , (12, 1105, 20150717, 20160607, [26],  "2016-17", '1105')),
                               ( 'Welsh Premier League'       , (12, 614,  20140822, 20150128, [22],  "2015-16", '614')),


                               ( 'Campeonato Brasileiro Serie A' , (20, 573, 20190428, 20181208, [38], "2019", '573' )),
                               ( 'Argentine Primera Division'    , (26, 590, 20160205, 20160522, [30, 15], "2018-19", '590' )),
                               ( 'Categoria Primera A'           , (20, 572, 20180202, 20181209, [20, 19, 18], "2019", '572' )),
                               ( 'Campeonato Nacional'      , (16, 591, 20180202, 20181202, [34, 35, 15], "2019", '591' )),
                               ( 'Liga de Futbol Profesional Boliviano', (14, 585, 20190119, 20191202, [44, 22], "2019", '585' )),
                               ( 'Uruguayan Primera Division'    , (16, 596, 20190209, 20191214, [15, 14, 13, 12], "2019", '596' )),
                               ( 'Peruvian Primera Division'     , (18, 598, 20190215, 20191215, [32, 16, 28], "2019", '598')),
                               ( 'Venezuelan Primera Division'   , (20, 597, 20190126, 20191209, [34, 17, 19], "2019", '597' )),
                               ( 'Ecuadorian Serie A'            , (12, 589, 20190210, 20191215, [22], "2019", '589')),
                               ( 'Paraguayan Primera Division'   , (12, 595, 20190122, 20191208, [44, 22], "2019" , '595')),

                               ( 'Korisliiga'   , (11, 2905, 20170928, 20180528, [36], "2018-19" , '2905')),
                                 ])

        self.get_sportsMC_games_count_eachteams()
        self.get_sports_redis_games_count_eachteams()

        title_format = 'Number of Teams in %s is different'
        query_format = 'select count(*) from sports_teams T, sports_participants P, sports_tournaments ST where P.id = T.participant_id and T.tournament_id = ST.id and ST.id = %s'

        for league, values in self.teams_for_each_tournament.iteritems():
            if league not in ('National Football League preseason', 'NHL Preseason', 'NBA Preseason', 'MLB Preseason'):
                team_count = values[0]
                tou_id = values[1]
                query = query_format % tou_id
                title = title_format % league
                self.get_result_count(query, title, team_count)


    def get_sportsdb_games_count_eachteams(self):
        self.sportsdb_games_count_eachteams = OrderedDict()
        for key, values in self.teams_for_each_tournament.iteritems():
            query = "select SP.title, P.participant_id, count(*) from sports_games G, sports_games_participants P, sports_participants SP where P.participant_id = SP.id and G.id= P.game_id and G.tournament_id in (%s) and date(game_datetime) >= '%s' and date(game_datetime) <= '%s' and G.status != 'hole' and G.status != 'postponed' and G.event_id in (%s) group by P.participant_id order by SP.title" % (values[1], values[2], values[3],  values[6])
            self.logger.info('Query for %s : %s' % (key, query))
            self.cursor.execute(query)
            for row in self.get_fetchmany_results():
                SP_title, P_participant_id, game_count = row
                sports_mc_games_count = self.sports_mc_tou_team_map.get(key,{}).get(SP_title.decode('utf8'),game_count)
                redis_games_count = self.sports_redis_mc_tou_team_map.get(key,{}).get(SP_title.decode('utf8'),0)
                game_count_list = values[4]
                if game_count not in game_count_list or sports_mc_games_count not in game_count_list:
                    f_game_count = game_count
                    f_sports_mc_games_count = sports_mc_games_count
                    if game_count not in game_count_list:
                        f_game_count = '<span class="badge badge-important">%s</span>' % game_count
                    if sports_mc_games_count not in game_count_list:
                        f_sports_mc_games_count = '<span class="badge badge-important">%s</span>' % sports_mc_games_count
                    self.sportsdb_games_count_eachteams.setdefault(key, []).append((SP_title.decode('utf8'), f_game_count, str(game_count_list).strip('[').strip(']'), values[2], values[3], f_sports_mc_games_count,redis_games_count))
            self.cursor.execute(query)
            query_val = self.cursor.fetchall()
            if not query_val:
                SP_title, P_participant_id, game_count = [ key, 0, 0 ] 
                sports_mc_games_count = self.sports_mc_tou_team_map.get(key,{}).get(SP_title.decode('utf8'),game_count)
                redis_games_count = self.sports_redis_mc_tou_team_map.get(key,{}).get(SP_title.decode('utf8'),0)
                game_count_list = values[4]
                if game_count not in game_count_list or sports_mc_games_count not in game_count_list:
                    f_game_count = game_count
                    f_sports_mc_games_count = sports_mc_games_count
                    if game_count not in game_count_list:
                        f_game_count = '<span class="badge badge-important">%s</span>' % game_count
                    if sports_mc_games_count not in game_count_list:
                        f_sports_mc_games_count = '<span class="badge badge-important">%s</span>' % sports_mc_games_count
                    self.sportsdb_games_count_eachteams.setdefault(key, []).append((SP_title.decode('utf8'), f_game_count, str(game_count_list).strip('[').strip(']'), values[2], values[3], f_sports_mc_games_count,redis_games_count))


        query = "select SP.title, P.participant_id, count(*) from sports_games G, sports_games_participants P, sports_participants SP where P.participant_id = SP.id and G.id= P.game_id and G.tournament_id in (9) and date(game_datetime) >= '20140823' and date(game_datetime) <= '20141213' and G.status != 'hole' and G.event_id in (0, 1010, 1074, 331, 342, 330, 347, 351, 464, 350, 341, 347, 464, 328) group by P.participant_id order by SP.title"
        self.logger.info('Query for NCAA College Football FBS : %s' % (query))
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            SP_title, P_participant_id, game_count = row
            title = SP_title.lower().replace('football', '').strip()
            if title in self.fbs_list:
                sports_mc_games_count = self.sports_mc_tou_team_map.get(key,{}).get(SP_title.decode('utf8'),game_count)
                redis_games_count = self.sports_redis_mc_tou_team_map.get(key,{}).get(SP_title.decode('utf8'),game_count)
                if game_count != 12 or sports_mc_games_count != 12:
                    if not (P_participant_id in NCAA_TEAMS_13 and game_count == 13 and sports_mc_games_count == 13)\
                        and not (P_participant_id in NCAA_TEAMS_11 and game_count == 11 and sports_mc_games_count == 11)\
                        and not (P_participant_id in NCAA_TEAMS_14 and game_count == 14 and sports_mc_games_count == 14)\
                        and not (P_participant_id in NCAA_TEAMS_15 and game_count == 15 and sports_mc_games_count == 15):
                        self.sportsdb_games_count_eachteams.setdefault('NCAA College Football FBS', []).append((SP_title, game_count, 12, '20140823', '20141213',sports_mc_games_count,redis_games_count))

        query = "select SP.title, P.participant_id, count(*) from sports_games G, sports_games_participants P, sports_participants SP where P.participant_id = SP.id and G.id= P.game_id and G.tournament_id in (9) and date(game_datetime) >= '20140823' and date(game_datetime) <= '20141213' and G.status != 'hole' and G.event_id in (0, 1010, 1074) group by P.participant_id order by SP.title"
        self.logger.info('Query for NCAA College Football FCS: %s' % (query))
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            SP_title, P_participant_id, game_count = row
            title = SP_title.lower().strip()
            if title in self.fcs_list:
                sports_mc_games_count = self.sports_mc_tou_team_map.get(key,{}).get(SP_title.decode('utf8'),game_count)
                redis_games_count = self.sports_redis_mc_tou_team_map.get(key,{}).get(SP_title.decode('utf8'),game_count)
                if game_count != 12 or sports_mc_games_count != 12:
                    if not (P_participant_id in NCAA_TEAMS_13 and game_count == 13 and sports_mc_games_count == 13)\
                       and not (P_participant_id in NCAA_TEAMS_14 and game_count == 14 and sports_mc_games_count == 14)\
                       and not (P_participant_id in NCAA_TEAMS_15 and game_count == 15 and sports_mc_games_count == 15)\
                       and not (P_participant_id in NCAA_TEAMS_11 and game_count == 11 and sports_mc_games_count == 11)\
                       and not (P_participant_id in NCAA_TEAMS_10 and game_count == 10 and sports_mc_games_count == 10)\
                       and not (P_participant_id in NCAA_TEAMS_1 and game_count == 1 and sports_mc_games_count == 1)\
                       and not (P_participant_id in NCAA_TEAMS_2 and game_count == 2 and sports_mc_games_count == 2)\
                       and not (P_participant_id in NCAA_TEAMS_3 and game_count == 3 and sports_mc_games_count == 3)\
                       and not (P_participant_id in NCAA_TEAMS_4 and game_count == 4 and sports_mc_games_count == 4):
                        self.sportsdb_games_count_eachteams.setdefault('NCAA College Football FCS', []).append((SP_title, game_count, 12, '20140823', '20150112',sports_mc_games_count,redis_games_count))

        #self.sportsdb_games_count_eachteams

    def get_tou_id_gid_map(self):
        self.tou_id_gid_map = {}
        query = "select id, gid from sports_tournaments"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            tou_id, tou_gid = row
            self.tou_id_gid_map[tou_id] = tou_gid


    def get_tou_info(self):
        self.tou_info = {}
        for key, values in self.teams_for_each_tournament.iteritems():
            ev_list = values[6].split(', ')
            for event in ev_list:
                tou_id = values[1]
                if event.isdigit() and int(event):
                    tou_id = int(event)

                self.tou_info[self.tou_id_gid_map.get(tou_id,tou_id)] = values + (key,)

    def get_team_gid_title_map(self):
        self.team_gid_title_map = {}
        query = "select gid, title from sports_participants where gid like '%TEAM%'"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            team_gid, title = row
            self.team_gid_title_map[team_gid] = title.decode('utf8')

    def get_sportsMC_games_count_eachteams(self):
        sports_schema = {}
        self.get_tou_id_gid_map()
        self.get_tou_info()
        tou_info = self.tou_info
        self.sports_mc_tou_team_map = {}

        tou_gids = set(tou_info.keys())
        for record in self.read_data_file(self.sports_mc_file, 'generic', sports_schema):
            tou_gid = record[sports_schema['Pi']]

            dt_str = record[sports_schema['Dt']]
            if not dt_str or not dt_str.split('T')[0].isdigit():
                self.logger.error('Sports_MC: Date Empty Error in record %s' %record)
                continue

            game_date = int(dt_str.split('T')[0])
            status = record[sports_schema['St']]

            if tou_gid in tou_gids:
                values = tou_info[tou_gid]
                tou_start_date = values[2]
                tou_end_date = values[3]
                key = values[7]
                if game_date >= tou_start_date and game_date <= tou_end_date and status not in ('hole','postponed'):
                    players_str = record[sports_schema['Ps']]
                    for team_name in StringUtil.parseMultiValuedVtvString(players_str, True):
                        self.sports_mc_tou_team_map.setdefault(key,{}).setdefault(team_name,0)
                        self.sports_mc_tou_team_map[key][team_name] += 1

    def get_wiki_sports_gid_map(self):
        self.wiki_sports_gid_map = {}
        query = "select exposed_gid, child_gid from sports_wiki_merge"
        self.guidmerge_cursor.execute(query)
        for row in self.get_fetchmany_results():
            wiki_gid, tou_gid = row
            self.wiki_sports_gid_map[wiki_gid] = tou_gid

    def get_sports_redis_games_count_eachteams(self):
        self.get_wiki_sports_gid_map()
        self.get_team_gid_title_map()

        tou_info = self.tou_info
        self.sports_redis_mc_tou_team_map = {}
        tou_gids = set(tou_info.keys())
        self.redis_dict = {}
        fp = open(self.redis_data_file)
        for line in fp:
            splitlist = line.split(':',2)
            if not len(splitlist) == 3:
                continue
            try:
                self.redis_dict['%s:%s' %(splitlist[0],splitlist[1])] = eval(splitlist[2])
            except:
                print 'parsing error redis data %s'%line

        for key, value in self.redis_dict.iteritems():
            tou_hash = value.get('event',{})
            
            if not tou_hash:
                tou_hash = value.get('tournament',{})
            
            
            tou_gid = ''
            if tou_hash:
                tou_wiki_gid = tou_hash.keys()[0]
                tou_gid = self.wiki_sports_gid_map.get(tou_wiki_gid,tou_wiki_gid)


            if tou_gid and tou_gid in tou_gids:
                values = tou_info[tou_gid]
                tou_start_date = values[2]
                tou_end_date = values[3]
                key = values[7]


                dt_str = value['OD']
                if not dt_str or not dt_str.split(' ')[0].replace('-','').isdigit():
                    self.logger.error('Redis_Sports: Date Empty Error in record %s' %key)
                    print 'Redis_Sports: Date Empty Error in record %s' %key
                    continue

                game_date = int(dt_str.split(' ')[0].replace('-',''))
                status = value['status']

                if game_date >= tou_start_date and game_date <= tou_end_date and status not in ('hole','postponed'):
                    part_hash_list = value.get('participants',[])
                    for part_hash in part_hash_list:
                        meta_hash = part_hash.get('meta',{})
                        for team_gid, title_hash in meta_hash.iteritems():
                            team_gid = self.wiki_sports_gid_map.get(team_gid,team_gid)
                            team_name = self.team_gid_title_map.get(team_gid,'')
                            if team_name:
                                self.sports_redis_mc_tou_team_map.setdefault(key,{}).setdefault(team_name,0)
                                self.sports_redis_mc_tou_team_map[key][team_name] += 1
                            

    def get_sportsdb_tou_team_count(self):
        self.sportsdb_tou_team_count = {}
        for key,values in self.teams_for_each_tournament.iteritems():
            query = "select T.id, T.participant_id, P.title, T.short_title, ST.title, ST.gid from sports_teams T, sports_participants P, sports_tournaments ST where P.id = T.participant_id and T.tournament_id = ST.id and P.title not in ('TBD', 'TBD1', 'TBD2') and ST.id = %s order by P.title"
            tou_id = values[1]
            self.cursor.execute(query , tou_id)
            for row in self.get_fetchmany_results():
                T_id, T_participant_id, P_title, T_short_title, ST_title, ST_gid = row
                self.sportsdb_tou_team_count.setdefault(key, []).append(P_title)

    def get_sportsdb_tou_parti_count(self):
        self.sportsdb_tou_parti_count = {}
        for key,values in self.teams_for_each_tournament.iteritems():
            query = "select TP.id, title, TP.participant_id, TP.tournament_id from sports_tournaments_participants TP, sports_participants SP where TP.participant_id = SP.id and SP.title not in ( 'TBD', 'TBD1', 'TBD2') and TP.tournament_id = %s and TP.season = %s order by title"
            vals = (values[1], values[5])
            self.cursor.execute(query, vals)
            for row in self.get_fetchmany_results():
                SP_id, SP_title, P_participant_id, tou_id = row
                self.sportsdb_tou_parti_count.setdefault(key, []).append(SP_title)

    def get_diff_sports_teams_sports_tou_parti(self):
        self.diff_sports_teams_sports_tou_parti = OrderedDict()
        for key, values in self.teams_for_each_tournament.iteritems():
            if key not in TOU_TEAMS_SKIP_LIST:
                if set(self.sportsdb_tou_team_count[key]) != set(self.sportsdb_tou_parti_count[key]):
                    diff_lens = [len(set(self.sportsdb_tou_team_count[key])), len(set(self.sportsdb_tou_parti_count[key]))]
                    diff_lens.sort()
                    diff_len = reduce(lambda x, y: y - x, diff_lens)
                    if key == 'Major League Soccer' and diff_len > 1:
                        self.diff_sports_teams_sports_tou_parti[key] = (len(set(self.sportsdb_tou_team_count[key])), len(set(self.sportsdb_tou_parti_count[key])))
                    elif key != 'Major League Soccer':
                        self.diff_sports_teams_sports_tou_parti[key] = (len(set(self.sportsdb_tou_team_count[key])), len(set(self.sportsdb_tou_parti_count[key])))
        #print self.diff_sports_teams_sports_tou_parti
        self.logger.info('For these many tournaments teams are not matching with sports_teams and sports_tournaments_participants tables %s' % self.diff_sports_teams_sports_tou_parti)

    def get_draw_games(self):
        self.draw_games = set()
        query = "select result_value, game_id from sports_games_results A, sports_games B where B.sport_id = '7' and A.game_id = B.id and A.result_type = 'score'"
        self.cursor.execute(query)
        #import pdb;pdb.set_trace()
        for row in self.get_fetchmany_results():
            result_value, game_id = row
            #print result_value, game_id
            scores = [i.strip() for i in result_value.split('-') if not 'Pen' in result_value]
            #print game_id
            if scores:
                try:
                    score1, score2 = scores
                    if score1 == score2:
                        self.draw_games.add(game_id)
                except ValueError:
                    pass

    def get_sports_games_completed(self):
        self.sports_games_completed = set()
        query = "select date(game_datetime), id , gid, sport_id, status, tournament_id  from sports_games  where status = 'completed' and game_datetime >= (curdate() - interval 70 day) order by game_datetime desc"
        self.cursor.execute(query)
        self.get_draw_games()
        Exluding_Ids = EXCLUDED_IDS.union(self.draw_games)
        for row in self.get_fetchmany_results():
            event_date, event_id , gid, sport_id, status, tournament_id = row
            if not event_id in Exluding_Ids:
                self.sports_games_completed.add(event_id)

    def get_sports_games_winners(self):
        self.sports_games_winners_set = set()
        query = "select id, game_id, participant_id, result_type, result_value from sports_games_results where result_type like 'winner' or result_value in ('match drawn', 'no result') or result_value like '%match tied%'"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            result_id, game_id, participant_id, result_type, result_value = row
            self.sports_games_winners_set.add(game_id)


    def get_completed_events_participants(self):
        self.completed_events_participants = {}
        for values in self.sports_games_completed:
            query = "select game_id, participant_id from sports_games_participants where game_id = %s" % values
            self.cursor.execute(query)
            for row in self.get_fetchmany_results():
                game_id, participant_id = row
                self.completed_events_participants.setdefault(game_id, []).append(participant_id)


    def get_completed_events_results(self):
        self.completed_events_results = {}
        for values in self.sports_games_completed:
            query = "select game_id, participant_id from sports_games_results where game_id = %s" % values
            self.cursor.execute(query)
            for row in self.get_fetchmany_results():
                game_id, participant_id = row
                self.completed_events_results.setdefault(game_id, []).append(participant_id)

    def check_completed_result_participant(self):
        self.not_matching_participant_results = []
        for values in self.sports_games_completed:
            try:
                if (set(self.completed_events_results[values]) - set([0])) != set(self.completed_events_participants[values]):
                    self.not_matching_participant_results.append(values)
                    self.logger.info('Completed events result_pariipant_ids and participants_participant_ids not match for %s ' % values)
            except KeyError:
                pass

    def get_sports_participnats_val(self):
        self.sports_participants_val = {}
        for values in self.participants_game_list:
            query = "select P.id, P.title, P.sport_id, P.participant_type from sports_participants P, sports_players SP where P.id = SP.participant_id and P.sport_id = '%s' and P.title not in ('TBD') group by P.title, SP.birth_date having count(*) > 1" % values
            self.cursor.execute(query)
            for row in self.get_fetchmany_results():
                pl_id, title, game, participant_type = row
                if int(pl_id) not in PL_SKIP_LIST:
                    self.sports_participants_val.setdefault(game, {}).setdefault(participant_type, []).append(title)
        #print self.sports_participants_val


    def get_sports_participnats_roster_val(self):
        self.sports_participnats_roster_val = {}
        for key, values in self.sports_participants_val.iteritems():
            for k, v in values.iteritems():
                for each_val in v:
                    each_val = MySQLdb.escape_string(each_val)
                    query = "select P.id, P.title, P.sport_id, R.team_id, P.participant_type, PP.title from sports_participants P, sports_roster R, sports_participants PP where P.id = R.player_id and PP.id = R.team_id and P.sport_id = '%s' and P.participant_type = 'player' and P.title like '%s'" % (key, each_val)
                    self.cursor.execute(query)
                    for row in self.get_fetchmany_results():
                        P_id, P_title, P_game, R_team_id, P_participant_type, PP_title = row
                        #print '%s player %s(%s) present for team %s (%s)' % (P_game, P_title, P_id, PP_title, R_team_id)

    def get_games_completed_winners(self):
        self.sports_games_winners = {}
        self.game_event_dict = {}
        query = "select date(G.game_datetime), G.id as G_ID, G.gid, G.sport_id, G.status, G.tournament_id, GR.id as GR_ID, GR.participant_id, GR.result_type, GR.result_value from sports_games G, sports_games_results GR where G.id = GR.game_id and G.status = 'completed' and GR.result_type = 'winner' and G.game_datetime >= (curdate() - interval %s day) order by G.game_datetime desc" % self.days_to_pick
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            events_date, event_id, event_gid, game, event_status, event_tou_id, game_result_id, event_parti_id, event_result_type, event_result_val = row
            self.sports_games_winners.setdefault(game, []).append((event_id, event_gid, game, event_status, event_tou_id, event_parti_id, event_result_type, event_result_val))
        #print  self.sports_games_winners


        for key, values in self.sports_games_winners.iteritems():
            for v in values:
                self.game_event_dict.setdefault(key, []).append(v[0])
        #print self.game_event_dict

    def get_game_event_results(self):
        self.game_event_results = {}
        for key, values in self.sports_games_winners.iteritems():
            for v in values:
                query = "select id, game_id, participant_id, result_type, result_value from sports_games_results where game_id = %s" % v[0]
                self.cursor.execute(query)
                for row in self.get_fetchmany_results():
                    result_id, game_id, participant_id, result_type, result_value = row
                    self.game_event_results.setdefault(v[0], {}).setdefault(participant_id, []).append((result_type, result_value))
        #print self.game_event_results


    def get_game_event_participants(self):
        self.game_event_participants = {}
        self.more_participants_for_events = {}
        for key, values in self.sports_games_winners.iteritems():
            for v in values:
                query = "select id, game_id, participant_id, is_home from sports_games_participants where game_id = %s" % v[0]
                self.cursor.execute(query)
                for row in self.get_fetchmany_results():
                    result_id, game_id, participant_id, is_home = row
                    self.game_event_participants.setdefault(v[0], []).append((participant_id))
        #print self.game_event_participants

        for key, values in self.game_event_dict.iteritems():
            if key in ['7', '2', '1', '6', '3']:
                for val in values:
                    if len(set(self.game_event_participants[val]))   != self.each_game_details[key][0]:
                        self.more_participants_for_events.setdefault(key, []).append(val)

        #self.logger.info('Games or events having more than or less than 2 participants: %s' % self.more_participants_for_events)

    def get_noof_games_for_participants(self):
        self.noof_games_for_participants = {}
        self.final_noof_games_for_participants = {}
        self.final_noof_games_for_participants_jinja = {}
        self.games_happened_jinja = set()
        query = "select G.game_datetime, G.id as G_ID, G.gid, G.sport_id,  G.tournament_id,  GP.participant_id from sports_games G, sports_games_participants GP where G.id = GP.game_id and G.status = 'completed' and G.game_datetime >= (curdate() - interval 70 day) order by G.game_datetime desc"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            game_datetime, gameid, gid, sport_id,  tournament_id,  participant_id = row
            #if game not in ['motorsports']:
            from_zone = pytz.utc
            to_zone = timezone('US/Eastern')
            game_datetime = game_datetime.replace(tzinfo=from_zone)
            game_datetime = game_datetime.astimezone(to_zone)
            self.noof_games_for_participants.setdefault(game_datetime.date(), {}).setdefault(sport_id, {}).setdefault(participant_id, []).append(gameid)
        #print self.noof_games_for_participants

        for key, values in self.noof_games_for_participants.iteritems():
            for k, v in values.iteritems():
                for i, j in v.iteritems():
                    if len(self.noof_games_for_participants[key][k][i]) > 1:
                        self.logger.info('On %s  participant %s participated in more than one %s game' % (key, i, k))
                        self.final_noof_games_for_participants.setdefault(key, {}).setdefault(k, []).append(i)
        #print self.final_noof_games_for_participants

        for key, values in self.final_noof_games_for_participants.iteritems():
            for k, val in values.iteritems():
                self.logger.info('On %s for %s there are %s participants having more than one events' % (key, k, len(values[k])))
                self.final_noof_games_for_participants_jinja.setdefault(key, {}).setdefault(k, []).append('<span class="badge badge-important">%s</span>' % len(values[k]))
                self.games_happened_jinja.add(k)

    def get_null_image_tournament(self):
        self.null_image_tournament = {}
        query = "select sport_id, count(image_link) from sports_tournaments where image_link = '' group by sport_id"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            sport_id, no_image_link = row
            self.null_image_tournament[sport_id] = no_image_link
        self.logger.info('Count of Tournaments have null image link : %s' % self.null_image_tournament)


    def get_null_image_player(self):
        self.null_image_player = {}
        query = "select sport_id,  count(image_link) from sports_participants where image_link = '' and participant_type = 'player' group by sport_id"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            sport_id, no_image_link = row
            self.null_image_player[sport_id] = no_image_link
        self.logger.info('Count of Players have null image link : %s'  % self.null_image_player)

    def get_null_image_team(self):
        self.null_image_team = {}
        query = "select sport_id,  count(image_link) from sports_participants where image_link = '' and participant_type = 'team' group by sport_id"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            sport_id, no_image_link = row
            self.null_image_team[sport_id] = no_image_link
        self.logger.info('Count of Teams have null image link : %s' % self.null_image_team)


    def get_ongoing_season_end(self):
        self.ongoing_season_end = {}
        query = """select T.title, T.gid, T.season_end, G.gid, G.sport_id, G.game_datetime from sports_tournaments T, sports_games G where T.id in (G.tournament_id , G.event_id) and G.status = "ongoing" and date(T.season_end) < curdate()"""
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            T_title, T_gid, T_season_end, G_gid, G_game, G_game_datetime = row
            self.ongoing_season_end[T_title.decode('utf-8')] = (T_gid, T_season_end, G_gid, G_game, G_game_datetime)
        self.logger.info('Completed tournament and their game status is ongoing : %s' % self.ongoing_season_end)

    def get_major_team_games(self):
        self.major_team_games = {}
        self.no_game_major_team = []
        for major_teams in MAJOR_TEAM_LIST:
            query = "select P.id, P.title, P.gid, G.id, G.sport_id, G.game_datetime from sports_participants P, sports_games G, sports_games_participants GP where G.id = GP.game_id and P.id = GP.participant_id and date(G.game_datetime) >= curdate() and date(G.game_datetime) <=  curdate() + interval 7 day and G.tournament_id not in (215, 216) and G.status != 'Hole' and P.title = '%s'" % major_teams
            self.logger.info('Number of major teams that does not have games in the next one week: %s ' %  query)
            self.cursor.execute(query)
            for row in self.get_fetchmany_results():
                P_id, P_title, P_gid, G_id, G_game, G_game_datetime = row
                self.major_team_games.setdefault(P_title, []).append((G_id, G_game, G_game_datetime))
            self.logger.info('No of games for %s in the next one week: %s' % (major_teams, self.major_team_games.get(major_teams, major_teams)))
            if len(self.major_team_games.get(major_teams, [])) > 2:
               self.sanity_list.append((len(self.major_team_games[major_teams]), 'Number of game for  %s in next one week' % major_teams))
        self.no_game_major_team.append(set(MAJOR_TEAM_LIST) - set(self.major_team_games.keys()))
        self.logger.info('Number of major teams that does not have games in the next one week: %s -- %s' % (len(self.no_game_major_team[0]), self.no_game_major_team) )


    def get_participant_final_count(self):
        self.participant_final_count= {}
        #for each_game_event in  ('soccer', 'football', 'basketball', 'baseball', 'cricket', 'hockey', 'tennis'):
        #for each_game_event in  ('7', '3', '2', '1', '4', '5', '6')
        for each_game_event in  self.sports_games_winners.keys():
            if each_game_event=='7':
                query = """select G.id, G.gid, G.sport_id, P.participant_id from sports_games G, sports_games_participants P where G.id = P.game_id and G.status = 'completed' and date(game_datetime)>='2018-08' and sport_id = '%s'""" % each_game_event
            else:
                query = """select G.id, G.gid, G.sport_id, P.participant_id from sports_games G, sports_games_participants P where G.id = P.game_id and G.status = 'completed' and  sport_id = '%s'""" % each_game_event
            self.cursor.execute(query)
            for row in self.get_fetchmany_results():
                G_id, G_gid, G_game, P_participant_id  = row
                self.participant_final_count.setdefault(G_game, {}).setdefault(G_id, []).append(P_participant_id)

    def get_participant_not_final_count_val(self):
        self.participant_not_final_count_val= {}
        for key, values in self.participant_final_count.iteritems():
            for game, participants in values.iteritems():
                for each_parti_values in participants:
                    query = """select game_id, participant_id, result_type from sports_games_results where result_type in ('final', 'score') and participant_id = %s and game_id = %s""" % (each_parti_values, game)
                    self.cursor.execute(query)
                    for row in self.get_fetchmany_results():
                        game_id, participant_id, result_type = row
                        self.participant_not_final_count_val.setdefault(game_id, []).append(participant_id)

    def get_not_final_result_type_games(self):
        self.not_final_result_type_games = {}
        for key, values in self.participant_final_count.iteritems():
            for each_game, parti in values.iteritems():
                try:
                    if not self.participant_not_final_count_val[each_game] == parti:
                        self.not_final_result_type_games.setdefault(key, {}).setdefault(each_game, []).append(parti)
                except KeyError:
                        pass

    def get_today_winners_list(self):
        self.today_winners_list_dict = {}
        score_set = {}
        participants_set = {}
        winner_set = {}
        rem_today_winners_list_dict = {}
        rem_score_set = {}
        rem_participants_set = {}
        remain_score_set = set()
        query = "select G.id, G.sport_id, T.title,  P.title,  PP.title, GRR.result_value from sports_games G, sports_tournaments T, sports_games_participants GP, sports_participants P, sports_games_results GR, sports_participants PP, sports_games_results GRR where G.game_datetime = curdate() and G.tournament_id = T.id and  G.status = 'completed' and  G.id = GP.game_id and GP.participant_id = P.id and G.id = GR.game_id and GR.result_type = 'winner' and GR.result_value = PP.id and G.id = GRR.game_id and GRR.result_type = 'score'"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            game_id, game, tournament, participants,  winner_title, score = row
            participants_set.setdefault(game_id, set()).add(StringUtil.cleanString(participants).title())
            winner_set.setdefault(game_id, set()).add(StringUtil.cleanString(winner_title).title())
            score_set.setdefault(game_id, set()).add(score)
            self.today_winners_list_dict[game_id] = (game, tournament.decode('utf8'), ' Vs '.join(participants_set[game_id]), list(winner_set[game_id])[0] , StringUtil.cleanString(list(score_set[game_id])[0]).upper().replace(' ', '-', 1))
        query = "select G.id, G.sport_id, T.title,  P.title, GRR.result_value from sports_games G, sports_tournaments T, sports_games_participants GP, sports_participants P, sports_games_results GRR where G.game_datetime = curdate() and G.tournament_id = T.id and  G.status = 'completed' and  G.id = GP.game_id and GP.participant_id = P.id  and G.id = GRR.game_id and GRR.result_type = 'score'"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            game_id, game, tournament, participants, score = row
            rem_participants_set.setdefault(game_id, set()).add(StringUtil.cleanString(participants).title())
            rem_score_set.setdefault(game_id, set()).add(score)
            rem_today_winners_list_dict[game_id] = (game, tournament.decode('utf8'), ' Vs '.join(rem_participants_set[game_id]), ' & '.join(rem_participants_set[game_id]), StringUtil.cleanString(list(rem_score_set[game_id])[0]).upper().replace(' ', '-', 1))
            remain_score_set = set(rem_today_winners_list_dict.keys()) - set(self.today_winners_list_dict.keys())
        for val in remain_score_set:
            self.today_winners_list_dict[val] = rem_today_winners_list_dict[val]

    def get_games_participant_result_check_val(self):
        self.games_participant_result_check_val = {}
        self.game_id_game = {}
        self.games_participant_check_val = {}
        self.games_result_check_val = {}
        query = "select id, sport_id from  sports_games"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            game_id, sport_id = row
            self.game_id_game[game_id] = sport_id

        query = "select game_id , sport_id, participant_id from sports_games G, sports_games_participants P where G.id = P.game_id"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            game_id, sport_id, participant_id = row
            self.games_participant_check_val.setdefault(game_id, []).append(participant_id)

        query = "select game_id , sport_id, participant_id from sports_games G, sports_games_results R where G.id = R.game_id"
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            game_id, sport_id, participant_id = row
            if participant_id != 0:
                self.games_result_check_val.setdefault(game_id, []).append(participant_id)

        for each_game, sport_id in self.game_id_game.iteritems():
            try:
                a = set(self.games_participant_check_val[each_game])
                b = set(self.games_result_check_val[each_game])
                if (b - a):
                    self.games_participant_result_check_val.setdefault(sport_id, []).append(each_game)
            except KeyError:
                pass

    def get_wrong_tou_dates(self):
        tou_ids          = set()
        eve_ids          = set()
        self.wrong_dates = {}
        query = 'select tournament_id from sports_games where status = "scheduled" and tournament_id is not NULL'
        self.cursor.execute(query)
        tou_id = self.cursor.fetchall()
        query = 'select event_id from sports_games where status = "scheduled" and event_id is not NULL'
        self.cursor.execute(query)
        eve_id = self.cursor.fetchall()
        for t_id in tou_id:
            tou_ids.add(t_id[0])
        tou_ids = list(tou_ids)
        for e_id in eve_id:
            eve_ids.add(e_id[0])
        eve_ids = list(eve_ids)

        query = 'select tournament_id, event_id from sports_tournaments_events where event_id not in (2555, 2570, 2574, 2985)'
        self.cursor.execute(query)
        for tou_event in self.get_fetchmany_results():
            tournament, event = tou_event
            tournament_dates = 'select id, title, date(season_start), date(season_end) from sports_tournaments where id =%s'
            values = (tournament, )
            self.cursor.execute(tournament_dates, values)
            tou = self.cursor.fetchone()
            values = (event, )
            self.cursor.execute(tournament_dates, values)
            eve = self.cursor.fetchone()
            if eve[2] < tou[2] or eve[3] > tou[3]:
                log_values = (eve[1], tou[1], eve[2], eve[3], tou[2], tou[3])
                self.logger.info('Wrong Event: %s, Tournament: %s, Event_dates: (%s, %s), tournament_dates: (%s: %s)' % log_values)
                self.wrong_dates[eve[0]] = eve

        tournament_ids = set(tou_ids + eve_ids)
        query = "select id, title, date(season_start), date(season_end) from sports_tournaments where id in (%s)" % ','.join(map(str, tournament_ids))
        self.cursor.execute(query)
        for tournament_date in self.get_fetchmany_results():
            if tournament_date[0] in tou_ids:
                query = 'select date(max(game_datetime)), date(min(game_datetime)) from sports_games where tournament_id = %s and status = "scheduled"' %tournament_date[0]
            elif tournament_date[0] in eve_ids:
                query = 'select date(max(game_datetime)), date(min(game_datetime)) from sports_games where event_id = %s and status = "scheduled"' %tournament_date[0]
            self.cursor.execute(query)
            data = self.cursor.fetchone()
            if data[0] < tournament_date[2] or data[0] > tournament_date[3]:
                self.wrong_dates[tournament_date[0]] = tournament_date
            if data[1] < tournament_date[2] or data[1] > tournament_date[3]:
                self.wrong_dates[tournament_date[0]] = tournament_date
            if tournament_date[3] < datetime.now().date():
                self.wrong_dates[tournament_date[0]] = tournament_date

        self.finals_dates = {}
        query = "select final_event_id, final_type from sports_tournaments_finals"
        self.cursor.execute(query)
        final_events = self.cursor.fetchall()
        for final_id, final_type in final_events:
            if not final_type.endswith('_1'):
                continue
                
            if final_id in self.wrong_dates and tournament_date[2] != tournament_date[2]:
                self.finals_dates[tournament_date[0]] = tournament_date
            elif final_id not in self.wrong_dates:
                values = (final_id, )
                self.cursor.execute(tournament_dates, values)
                event_data = self.cursor.fetchone()
                if event_data[2] != event_data[3]:
                    self.finals_dates[event_data[0]] = event_data

    def get_wrong_season(self):
        tables = ['sports_roster', 'sports_tournament_results', \
                  'sports_groups_participants', 'sports_groups_results', \
                  'sports_tournaments_participants']
        for table in tables:
            query = 'select distinct season from sports_groups_participants where length(season) > 4 and length(season) > 7'
            title = 'Number of seasons length is more than 7 characters in %s' % table
            self.get_result_count(query, title)

            query = "select distinct season from sports_groups_participants where length(season) > 4 and season NOT REGEXP '-'"
            title = 'Number of wrong seasons present in %s' % table
            self.get_result_count(query, title)

    def get_player_roles(self):
        all_active_player_roles = []
        query = 'select distinct BINARY(player_role) from sports_roster where status="active" and player_role!="" and player_role not like \'%coach%\''
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            role = row[0]
            all_active_player_roles.append(role)

        roles_diff_list = set(all_active_player_roles) - set(ROLES_LIST)
        if roles_diff_list:
            title = 'Number of players that are not having proper player role in sports_roster'
            self.logger.info(('%s: %s'  % (title, roles_diff_list)))
            self.sanity_list.append((len(roles_diff_list), title))
        
    def get_uppercase_values(self):
        stadiums_uppercase = []
        location_uppercase = []

        stadiums_white_spaces = []
        location_white_spaces = []

        country_list = ['UK', 'USA', 'USSR']

        query = 'select title from sports_stadiums where id not in (6055, 7913, 5190, 10739, 10871, 14318)'
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            title = row[0]
            if title.strip().isupper():
                stadiums_uppercase.append(title)
            if title.strip().islower():
                stadiums_uppercase.append(title)

            if title.startswith(' ') or title.endswith(' '):
                stadiums_white_spaces.append(title)

        if stadiums_uppercase:
            title = 'Number of stadiums that are present with upper/lower case in sports_stadiums'
            self.logger.info(('%s: %s'  % (title, stadiums_uppercase)))
            self.sanity_list.append((len(stadiums_uppercase), title))

        if stadiums_white_spaces:
            title = 'Number of stadiums that are having white spaces in sports_stadiums'
            self.logger.info(('%s: %s'  % (title, stadiums_white_spaces)))
            self.sanity_list.append((len(stadiums_white_spaces), title))

        query = 'select id, city, state, country, continent from sports_locations where id not in (9379, 7840, 7877, 8019, 15607, 16972)'
        self.cursor.execute(query)
        for row in self.get_fetchmany_results():
            for data in row[1:]:
                if data in country_list:
                    continue
                if data and (data.isupper() or data.islower()):
                    if type(data) != unicode:
                        location_uppercase.append(row[0])
                if data.startswith(' ') or data.endswith(' '):
                    location_white_spaces.append(row[0])

        if location_uppercase:
            title = 'Number of locations that are present with upper/lower case in sports_locations'
            self.logger.info(('%s: %s'  % (title, location_uppercase)))
            self.sanity_list.append((len(location_uppercase), title))

        if location_white_spaces:
            title = 'Number of locations that are having white spaces in sports_locations'
            self.logger.info(('%s: %s'  % (title, location_white_spaces)))
            self.sanity_list.append((len(location_white_spaces), title))
   
    def get_usa_states_count(self):
        query = "select count(distinct BINARY(state)) from sports_locations where country = 'USA' and state not in ('District of Columbia', 'Puerto Rico', 'Guam') and id!=5166"
        title = 'Number of USA States count is different in sports_locations'
        self.cursor.execute(query)
        states_count = str(self.cursor.fetchone()[0])
        if states_count != '51':
            self.logger.info(('%s: %s'  % (title, query)))
            self.sanity_list.append((states_count, title))

    def get_germany_states_count(self):
        query = "select count(distinct BINARY(state)) from sports_locations where country = 'Germany' and state !=''"
        title = 'Number of Germany States count is different in sports_locations'
        self.cursor.execute(query)
        states_count = str(self.cursor.fetchone()[0])
        if states_count != '16':
            self.logger.info(('%s: %s'  % (title, query)))
            self.sanity_list.append((states_count, title))

    def get_france_states_count(self):
        query = "select count(distinct BINARY(state)) from sports_locations where country = 'France' and state != ''"
        title = 'Number of France States count is different in sports_locations'
        self.cursor.execute(query)
        states_count = str(self.cursor.fetchone()[0])
        if states_count != '18':
            self.logger.info(('%s: %s'  % (title, query)))
            self.sanity_list.append((states_count, title))

    def get_brazil_states_count(self):
        query = "select count(distinct BINARY(state)) from sports_locations where country = 'Brazil' and state != ''"
        title = 'Number of Brazil States count is different in sports_locations'
        self.cursor.execute(query)
        states_count = str(self.cursor.fetchone()[0])
        if states_count != '27':
            self.logger.info(('%s: %s'  % (title, query)))
            self.sanity_list.append((states_count, title))

    def get_spain_states_count(self):
        query = "select count(distinct BINARY(state)) from sports_locations where country = 'Spain' and state != ''"
        title = 'Number of Spain States count is different in sports_locations'
        self.cursor.execute(query)
        states_count = str(self.cursor.fetchone()[0])
        if states_count > '50':
            self.logger.info(('%s: %s'  % (title, query)))
            self.sanity_list.append((states_count, title))


    def get_leagues_check(self):
        self.leagues_rovi_id = {}
        leaguefile = os.path.join(self.datagen_dirs.rovi_unbound_fetch_data_dir, 'League.txt')
        rows = open(leaguefile)
        for ind, row in enumerate(rows):
            if ind == 0:
                continue
            record = [rw.strip() for rw in row.strip().split('|')]
            rovi_id = record[0]
            league_name = record[1]
            if str(rovi_id) == '801359027':
                continue
            query = 'select id from sports_rovi_merge where rovi_id=%s'
            self.cursor.execute(query, rovi_id)
            result = self.cursor.fetchone()
            if not result:
                self.leagues_rovi_id[rovi_id] = league_name
        if self.leagues_rovi_id:
            title = 'Number leagues rovi_id not present in sports_rovi_merge'
            self.logger.info(('%s: %s'  % (title, self.leagues_rovi_id)))
            self.sanity_list.append((len(self.leagues_rovi_id), title))


    def get_teams_rovimerge_check(self):
        self.teams_rovi_merge = {}
        teamsfile = os.path.join(self.datagen_dirs.rovi_unbound_fetch_data_dir, 'Teams.txt')
        rows = open(teamsfile)
        for ind, row in enumerate(rows):
            if ind == 0:
                continue
            record = row.strip().split('|')
            rovi_id = record[0]
            team_name = record[4]
            query = 'select id from sports_rovi_merge where entity_type="team" and rovi_id=%s'
            self.cursor.execute(query, rovi_id)
            result = self.cursor.fetchone()
            if not result:
                self.teams_rovi_merge[rovi_id] = team_name
        if self.teams_rovi_merge:
            title = 'Number teams rovi_id not present in sports_rovi_merge'
            self.logger.info(('%s: %s'  % (title, self.teams_rovi_merge)))
            self.sanity_list.append((len(self.teams_rovi_merge), title))

    def dump_report(self):

        test_report_file_format = 'SPORTSDB_SANITY_REPORT.html'
        test_report_file_name = test_report_file_format + '_%s.html' %  cur_date
        test_report_file_name = os.path.join(REPORT_DIR, test_report_file_name)

        return test_report_file_name, test_report_file_format



    def cleanup(self):
        self.move_logs(self.OUT_DIR, [ ('.', 'sportsdb_sanity*log'), ])
        self.remove_old_dirs(self.OUT_DIR, self.logs_dir_prefix, self.log_dirs_to_keep, check_for_success=False)


    def get_latest_log(self):
        log_file_prefix = '%s/logs_sportsdb_sanity_%s' % (LOG_DIR, cur_date)
        self.latest_log_file =  os.path.join(log_file_prefix, get_latest_file('sportsdb_sanity*log', self.logger))

    def run_main(self):

        self.open_cursor(mysql_ip, db_name)
        test_report_file_names, latest_report_file_format = self.dump_report()
        self.image_cursor, self.image_db = self.open_my_cursor(imagedb_ip, imagedb_name)
        self.guidmerge_cursor, self.guidmerge_db = self.open_my_cursor(guidmergedb_ip, guidmergedb_name)
        copy_file(test_report_file_names, latest_report_file_format, self.logger)

        #self.open_cursor(mysql_ip, db_name)

        self.sanity_list = []
        self.get_improper_season()
        self.get_roster_count()
        self.get_sports_roster_val()
        self.get_all_tournament_participants()
        self.get_sports_tou_parti_val()
        self.get_sports_tou_event()
        self.get_parent_list()
        #self.get_all_team_merge()
        #self.get_wrong_game_name()
        #self.get_deleted_merge_gids_data()
        self.get_sports_events_dict()
        self.get_null_event_check()
        self.get_standings_missing_count()
        self.get_teams_for_each_tournament()
        self.load_fbs()
        self.load_fcs()
        self.get_sportsdb_games_count_eachteams()
        self.get_sportsdb_tou_parti_count()
        self.get_sportsdb_tou_team_count()
        self.get_diff_sports_teams_sports_tou_parti()
        self.get_sports_games_completed()
        self.get_sports_games_winners()
        self.get_games_completed_winners()
        self.get_game_event_results()
        self.get_game_event_participants()
        self.get_noof_games_for_participants()
        self.get_completed_events_participants()
        self.get_completed_events_results()
        self.check_completed_result_participant()
        self.get_sports_participnats_val()
        self.get_sports_participnats_roster_val()
        self.get_null_image_tournament()
        self.get_null_image_team()
        self.get_null_image_player()
        self.get_ongoing_season_end()
        self.get_major_team_games()
        self.get_participant_final_count()
        self.get_participant_not_final_count_val()
        self.get_not_final_result_type_games()
        self.get_today_winners_list()
        self.get_games_participant_result_check_val()
        self.get_latest_log()
        self.get_gid_wiki_list()
        self.get_tou_team_gids()
        #self.get_imagedb_gids()
        self.get_wrong_tou_dates()
        self.get_wrong_season()
        self.get_player_roles()
        self.get_uppercase_values()
        self.get_usa_states_count()
        self.get_germany_states_count()
        self.get_france_states_count()
        self.get_brazil_states_count()
        self.get_spain_states_count()
        self.get_leagues_check()
        self.get_players_birthdate()
        self.get_teams_rovimerge_check()
        self.imagedb_gids = set()

        print 'No. of days from today : %s' % self.days_to_pick
        print 'Games happened         : %s' % self.sports_games_winners.keys()
        for key, values in self.game_event_dict.iteritems():
            print 'Number of Events for %s are %d' % (key, len(values))


        query = 'select sport_id, count(*) from sports_games where tournament_id = 0 and  status!= \"Hole\" group by sport_id'
        title = 'Number of games without Tournament ID'
        self.get_result_count(query, title)

        query = 'select sport_id, count(*) from sports_tournaments where affiliation = \'\' group by sport_id'
        title = 'Number of Tournaments having no affiliation'
        self.get_result_count(query, title)

        query = "select count(*) from sports_titles_regions where char_length(iso) != 3 and iso != 'zh-Hans';"
        title = 'Number of records where iso code is not 3 lettered in Sports titles regions table'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_teams where category = \'\''
        title = 'Number of Teams having no Category'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_participants P, sports_teams T where P.title like \'%women%\' and P.id = T.participant_id and T.gender != \'female\''
        title = 'Number of Womens Teams does not have female as gender'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_games where status != "Hole" and sport_id = ""'
        title = 'Number of sports_games having empty game field'
        self.get_result_count(query, title)

        query = 'select participant_id from sports_players A, sports_participants B where A.participant_id = B.id and B.participant_type not in ("retired")'
        title = 'Number of Players not having any tournament or team'
        self.cursor.execute(query)
        all_player = self.roster_val.union(self.tou_parti_val)
        count = 0
        for row in self.get_fetchmany_results():
            player_id = row[0]
            if player_id not in all_player:
               count += 1
        self.sanity_list.append((count, title))

        query = 'select count(*) from sports_games where id in (select distinct game_id from sports_games_results where result_type = \'winner\' and result_value = 0) and game_datetime < curdate() and year(game_datetime) = year(curdate()) and status !="Hole"'
        title = 'Number of winner\'s result_type does not have a vaild Participant'
        self.get_result_count(query, title)

        query = 'select sport_id, count(*) from sports_games where game_datetime like \'0000-00-00 00:00:00\' group by sport_id'
        title = 'Number of games having null game_datetime'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_games_results A left join sports_games B on A.game_id = B.id where B.id is NULL'
        title = 'Number of game_id present in sports_games_results not present in sports_games table'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_games_participants A left join sports_games B on A.game_id = B.id where B.id is NULL'
        title = 'Number of game_id present in sports_games_participants not present in sports_games table'
        self.get_result_count(query, title)

        query = 'select event_id, count(*) from sports_tournaments_events group by event_id having count(*)>1'
        title = 'Number of same event part of multiple tournaments'
        self.get_result_list_count(query, title)

        query = 'select G.gid, G.tournament_id, P.game_id, count(*) from sports_games G, sports_games_participants P where G.id = P.game_id and G.tournament_id in (2841, 2850, 1891, 3419, 558, 564, 1105, 599, 569, 570, 575, 578, 609, 559, 567, 28, 2207, 5476, 571, 3601, 574, 4096, 580, 3838, 610, 3626, 240, 197, 88, 229, 35, 32, 33, 2553, 631, 579, 29, 573, 215, 216, 1825, 2209, 1895, 954, 1850, 586, 2905, 34, 214, 562, 572, 585, 589, 590, 591, 595, 596, 597, 598,1064,2235, 213, 9) and G.status !="Hole" and game_datetime >= (curdate() - interval 300 day) group by game_id, tournament_id having count(*) not in (2) order by tournament_id'
        title = 'Number of Sports package leagues not having 2 participants'
        self.get_result_list_count(query, title)

        #query = 'select count(*) from sports_tournaments where gid not in (select sports_gid from sports_wiki_merge where action=\'override\')'
        #title = 'Number of tournaments does not have wiki merge'
        #self.get_result_count(query, title)

        #query = 'select count(*) from sports_participants where participant_type = \'team\' and title not in ("TBD") and gid not in (select sports_gid from sports_wiki_merge where action in (\'override\', \'check\')) and id not in (%s)' % ','.join(map(str, TEAM_MERGE_SKIP_LIST))
        #title = 'Number of teams does not have wiki merge'
        #self.get_result_count(query, title)

        #query = 'select count(*) from sports_wiki_merge where action in (\'override\', \'check\')'
        #status, process = ssh_utils.ssh_cmd_output(ip, self.vtv_username, self.vtv_password, 'wc -l %s' % SPORTS_MERGE_LIST_FILE)
        #check_val  =  os.system('wc -l %s' % SPORTS_MERGE_LIST_FILE)
        #check_val = int(process.before.strip().split()[0])
        #title = 'Difference between SPORTDB.wiki_merge count and sports_to_wiki_guid_merge.list line count'
        #self.get_check_result(query, title, check_val)

        #query = 'select * from sports_wiki_merge where sports_gid like \'%PL%\' and sports_gid not in (select gid from sports_participants where gid like \'%PL%\')'
        #title = 'Number of players that are present in wiki merge, but not present in sports participants'
        #self.get_result_list_count(query, title)

        #query = 'select * from sports_wiki_merge where sports_gid like \'%TOU%\' and sports_gid not in (select gid from sports_tournaments where gid like \'%TOU%\')'
        #title = 'Number of tournaments that are present in wiki merge, but not present in sports tournaments'
        #self.get_result_list_count(query, title)

        #query = 'select * from sports_wiki_merge where sports_gid like \'%TOU%\' and sports_gid not in (select gid from sports_tournaments where gid like \'%TOU%\')'
        #title = 'Number of tournaments that are present in wiki merge, but not present in sports tournaments'
        #self.get_result_list_count(query, title)

        #query = 'select * from sports_wiki_merge where sports_gid like \'%TEAM%\' and sports_gid not in (select gid from sports_participants where gid like \'%TEAM%\')'
        #title = 'Number of teams that are present in wiki merge, but not present in sports participants'
        #self.get_result_list_count(query, title)

        '''
        query = 'select count(*) from sports_games where status = "completed" and game_datetime > curdate()+1'
        title = 'Number of sports games that are completed and the game date is grater than todays date'
        self.get_result_count(query, title)
        '''

        query = 'select count(*) from sports_tournaments_participants T left join sports_participants P on T.participant_id = P.id where P.id is NULL'
        title = 'Number of sports_tournaments_participants that are not present in sports_participant table'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_games_participants T left join sports_participants P on T.participant_id = P.id where P.id is NULL'
        title = 'Number of sports_games_participants that are not present in sports_participants table'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_tournaments where type = \'\''
        title = 'Number of tournaments having no type'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_tournaments_participants where tournament_id = 0'
        title = 'Number of sports tournament participants with tournament_id 0'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_tournaments_participants where participant_id = 0'
        title = 'Number of sports tournament participants with participant_id 0'
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants where title = '' and participant_type = 'player'"
        title = 'Number of sports players having null title'
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants where title = '' and participant_type = 'teams'"
        title = 'Number of sports teams having null title'
        self.get_result_count(query, title)

        query = 'select sport_id, count(*) from sports_games where status = \'scheduled\' and game_datetime < curdate() and year(game_datetime) = year(curdate()) group by sport_id'
        title = 'Number of sports games that are scheduled and the game date is less than todays date'
        self.get_result_count(query, title)

        #query = 'select date(game_datetime), count(*) from sports_games where game_datetime < now() and status = \'scheduled\' group by date(game_datetime)'
        #title = 'Number of past game status as scheduled in DB'
        #self.get_result_count(query, title)

        query = "select sport_id, count(*) from sports_participants where participant_type= 'team' and sport_id not in (8, 9, 80, 16, 58) and id not in (select team_id from sports_roster) group by sport_id"
        title = 'Number of teams that are not present in sports_roster'
        self.get_result_count(query, title)

        query = "select sport_id, count(*) from sports_participants where participant_type='player' and location_id='' group by sport_id"
        title = 'Number of participants that are not having location_id in sports_participants'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_locations where length(city)=2 and city != "Ba"'
        title = 'Number of cities having length 2 in sports_locations'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_locations where length(state)=2'
        title = 'Number of states having length 2 in sports_locations'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_locations where country not in ("uk") and length(country)=2'
        title = 'Number of countries having length 2 in sports_locations'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_locations where country not in ("usa", "tba") and length(country)=3'
        title = 'Number of countries having length 3 in sports_locations'
        self.get_result_count(query, title)

        #query = 'select count(distinct team_id) from sports_roster where player_role not like \'%coach%\' and status="active"'
        #title = 'Number of teams that are not having coach information in sports_roster'
        #self.get_result_count(query, title)

        '''query = 'select count(*) from sports_wiki_merge where wiki_gid not like \'WIKI%\''
        title = 'Number of wrong typo for wiki gid in sports_wiki_merge'
        self.get_result_count(query, title)'''

        query = "select sport_id, count(id) from sports_games where id not in (select game_id from sports_games_results)  and status = 'completed' and id not in (89364, 89363) group by sport_id order by game_datetime desc"
        title = 'Number of completed games that is not present in  sports_games_result'
        self.get_result_count(query, title)

        query = 'select result_value, count(*) from sports_games_results where result_value in ("gold", "silver", "bronze") group by result_value'
        title = 'Number of gold, silver and bronze medals are different'
        #self.get_medals_count(query, title)

        query = "select sport_id, count(id) from sports_games where id not in (select game_id from sports_games_participants)  and status = 'completed' and id not in (89364, 89363)  and sport_id !=14 group by sport_id order by game_datetime desc"
        title = 'Number of completed games that is not present in  sports_games_participants'
        self.get_result_count(query, title)

        query = "select sport_id, count(*) from sports_tournaments where base_popularity = 0 group by sport_id"
        title = 'Number tournaments having 0 base popularity'
        self.get_result_count(query, title)

        query = "select count(participant_id) from sports_tournaments_participants where participant_id in (select id from sports_participants where participant_type = 'player' and sport_id in ('1', '2', '3', '4', '5', '7', '21', '29'))"
        title = 'Number of team players, present as participant in sports_tournament_participants'
        self.get_result_count(query, title)

        query = "select count(distinct(id)) from sports_games where sport_id = '7' and game_datetime >= (curdate() - interval 70 day) and status = 'completed' and id not in (select game_id from sports_games_results where result_type in ('H1'))"
        title = 'Number of completed soccer games that does not have H1 result_type'
        self.get_result_count(query, title)
   
        query  = "select count(S.gid) from sports_stadiums S, sports_locations L where S.location_id = L.id  and (L.state is not NULL or L.state != '') and (L.country is NULL or L.country = '')"
        title = 'Number of stadium\'s location that have state and empty country field'
        self.get_result_count(query, title)

        '''
        query = "select count(*) from sports_games where tournament_id = ''"
        title = 'Number of sports events/games that does not have a tournament id'
        self.get_result_count(query, title)
        '''
        query = "select * from sports_tournaments_results where tournament_id in (select id from sports_tournaments where season_end > curdate()) and id not in (%s) and tournament_id in (select tournament_id from sports_tournaments_results) and  result_type not in ('standings', 'standings_order') and season not in ('2013', '2012', '2014', '2015', '2016')" % ', '.join(map(str, TOU_RES_IGONORED_IDS)) 
        ## Here change = year(curdate()) to <= year(curdate()) once the 2012 problem got fixed
        title = 'Number of tournaments that are present in tournament_result table with future end date'
        self.get_result_list_count(query, title)

        query = "select * from sports_participants where participant_type  not in  ('team', 'player', 'obsolete', 'retired')"
        title = 'Number of participants their participant_type is neither team nor player'
        self.get_result_list_count(query, title)

        query = "select sport_id, count(*) from sports_tournaments where id not in (select tournament_id from sports_tournaments_results  where result_type='winner') and type = 'tournament' and season_end < curdate() and date(season_start)>'20130101' and affiliation != 'obsolete' and id not in (%s) group by sport_id" % ', '.join(map(str, TOU_WINNER_SKIP_LIST))
        title = 'Number of completed tournaments that are not present in sports_tournaments_result'
        self.get_result_count(query, title)

        query = "select count(*) from sports_tournaments where season_end is NULL or season_start is NULL and affiliation != 'obsolete';"
        title = 'Number of tournaments does not having season_start or season_end date'
        self.get_result_count(query, title)

        query = "select count(*) from sports_tournaments where (date(season_start) < makedate(YEAR(date_sub(curdate(), interval 1 year)), 1) or date(season_end) < makedate(YEAR(date_sub(curdate(), interval 1 year)), 1)) and sport_id in ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10') and affiliation != 'obsolete' and id not in (222, 1850, 1364, 1365, 1366, 1483, 1481, 1482, 1484)"
        title = 'Number of tournaments their season_start or season_end is before 2013'
        self.get_result_count(query, title)

        query = '''select count(id) from sports_roster where length(player_role) <=4 and status not in ("", "inactive") and player_role not in ("Prop", "Lock", "Wing") or player_role like "'%s'"''' % pattern
        title = "Number of players having their player_role (in sports_roster) length <= 4"
        self.get_result_count(query, title)

        query = "select count(*) from sports_players where length(main_role) <=3 and main_role != ''"
        title = "Number of players having their main_role (in sports_players) length <= 4"
        self.get_result_count(query, title)

        query = 'select count(*) from sports_participants where participant_type = "team" and ( location_id = 0 or location_id is NULL )'
        title = 'Number of teams having location id as 0 or NULL'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_tournaments where type="tournament" and affiliation!= "obsolete" and ( location_ids = 0 or location_ids is NULL )'
        title = 'Number of tournaments having location id as 0 or NULL'
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants where id in (select team_id from sports_roster) and participant_type = 'player'"
        title = 'Number of invalid team_id in roster'
        self.get_result_count(query, title)

        query = "select id from sports_participants where id in (select player_id from sports_roster where status='active') and participant_type = 'team'"
        title = 'Number of invalid player_id in roster'
        self.get_result_count(query, title)

        '''query = "select count(*) from (select player_id, tournament_id, count(*) from sports_roster, sports_teams where status = 'active' and sports_teams.participant_id = team_id group by player_id, tournament_id having count(*) > 1) a"
        title = 'Number of players that are active for more than one team for same tournament'
        self.get_result_count(query, title)'''

        query = "select player_id from sports_roster where status is NULL or status = ''"
        title = 'Number of players having empty status'
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants_phrases where phrase='' and field in('Ak','Dt','Rt','Ti','Ke')"
        title = 'Number of participants having empty phrases'
        self.get_result_count(query, title)

        query = "select count(*) from sports_groups_phrases where phrase='' and field in('Ti','AK','Ke')"
        title = 'Number of groups having empty phrases'
        self.get_result_count(query, title)

        query = "select count(*) from sports_phrases where phrase='' and location in('Ti','Ak')"
        title = 'Number of locations having empty phrases'
        self.get_result_count(query, title)

        query = "select count(*) from sports_stadiums_phrases where phrase='' and field in('Ti','Ak')"
        title = 'Number of stadiums having empty phrases'
        self.get_result_count(query, title)

        query = "select count(*) from sports_tournaments_phrases where phrase='' and field in('Ti','Ak','Ke','Za')"
        title = 'Number of tournaments having empty phrases'
        self.get_result_count(query, title)

        query = "select count(*) from sports_types_phrases where phrase='' and field in('Ti','Ak')"
        title = 'Number of types having empty phrases'
        self.get_result_count(query, title)

        query = "select count(*) from sports_players where height like '%-%'"
        title = 'Number of players having invalid height field'
        self.get_result_count(query, title)

        query = "select count(*) from sports_players where (length(height)>7 or height like '%.%' or height like '%ft%' or height like '%(%' or height like '%[%')"
        title = 'Number of players having invalid height field'
        self.get_result_count(query, title)

        query = "select count(*) from sports_players where (length(height)<6 or height = '0 cm') and height !=''"
        title = 'Number of players having Invalid Height in players table'
        self.get_result_count(query, title)

        query = "select count(*) from sports_tournaments_participants where tournament_id =0"
        title = 'Number of records having 0 tournament_id in sports_tournaments_participants table'
        self.get_result_count(query, title)

        query = "select count(distinct season) as count, tournament_id from sports_tournaments_participants where tournament_id in (2841, 2850, 1891, 3419, 558, 564, 1105, 599, 569, 570, 575, 578, 609, 559, 567, 28, 2207,5476, 571, 3601, 574, 4096, 580, 3838, 610, 3626, 240, 197, 88, 229, 35, 32, 33, 2553, 631, 579, 29, 573, 215, 216, 1825, 2209, 1895) group by tournament_id having count>1"
        title = 'Number of sports package leagues having more than one season info'
        self.get_result_count(query, title)
            
        query = 'select count(*) from sports_games where sport_id =13 and tournament_id =event_id  and status !="Hole"'
        title = 'Number of motorcycle racing games having duplicates in DB'
        self.get_result_count(query, title)

        '''query = 'select count(*) from sports_teams where (short_title like "%“%" or short_title  like "%„%" or display_title like "%“%" or display_title  like "%„%")'
        title = 'Number teams having unwanted data in short_title field'
        self.get_result_count(query, title)'''

        query = 'select count(*) from sports_teams where length(short_title)<=2 and short_title !="" and participant_id not in (347, 348)'
        title = 'Number of teams having short_title length less than 2'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_teams where length(display_title)<=2 and display_title !="" and participant_id not in (347, 348, 191650, 191646, 192090, 192570, 192755, 192757, 193563, 211797)'
        title = 'Number of teams having display_title length less than 2'
        self.get_result_count(query, title)
        
        query = "select count(*) from GUIDMERGE.sports_wiki_merge where exposed_gid not like '%WIKI%'"
        title = 'Number of Wrong Wiki Merge in GUIDMERGE DB'
        self.get_result_count(query, title)
        
        query = "select count(*) from GUIDMERGE.sports_wiki_merge where (child_gid not like '%PL%' and child_gid not like '%TEAM%' and child_gid not like '%TOU%' and child_gid not like '%GR%' and child_gid not like '%SPORT%' and child_gid not like '%STAD%')"
        title = "Number of Wrong Sports gids in GUIDMERGE DB"
        self.get_result_count(query, title)

        query = "select count(*) from sports_players where weight like '%,%'"
        title = 'Number of players having invalid weight field'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_games where location_id=2'
        title = 'Number of games having wrong location_id'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_stadiums where location_id=2'
        title = 'Number of stadiums having wrong location_id'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_participants where location_id=2'
        title = 'Number of participants having wrong location_id'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_participants where image_link not like \'%http%\' and image_link !=""'
        title = 'Number of participants having wrong image links'
        self.get_result_count(query, title)

        query = "select count(*) from sports_players where (length(weight)<5 or weight='0 kg')and weight !=''"
        title = 'Number of players having wrong weight in players table'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_roster where season= "" and status="active"'
        title = 'Number of active players are having empty season'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_roster where season= ""'
        title = 'Number of players are having empty season in sports roster'
        self.get_result_count(query, title)

        query = 'select sport_id, count(*) from sports_games where status!="Hole" and event_id=0 group by sport_id'
        title = 'Number of games that are having event_id as 0 in sports_games'
        self.get_result_count(query, title)

        query = 'select base_popularity, count(*) from sports_tournaments_groups where base_popularity not in (100, 200) group by base_popularity'
        title = 'Number tournament groups that are having wrong popularity in sports_tournaments_groups'
        self.get_result_count(query, title)

        query = 'select gid from sports_tournaments_groups where gid not like BINARY "GR%"'
        title = "Number of tournament groups that are not having proper gid in sports_tournaments_groups"
        self.get_result_count(query, title)

        query = 'select gid from sports_tournaments where gid not like BINARY "TOU%"'
        title = "Number of tournaments that are not having proper gid in sports_tournaments"
        self.get_result_count(query, title)

        query = 'select gid from sports_participants where gid not like BINARY "TEAM%" and participant_type="team"'
        title = "Number of teams that are not having proper gid in sports_participants"
        self.get_result_count(query, title)

        query = 'select gid from sports_participants where gid not like BINARY "PL%" and participant_type="player"'
        title = "Number of players that are not having proper gid in sports_participants"
        self.get_result_count(query, title)

        query = 'select game_id, count(*) from sports_games_results where result_value is NULL group by game_id'
        title = 'Number of games that are having result value is NULL in sports_games_results'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_locations where country = ""'
        title = 'Number of records that are having empty country in sports_locations'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_games where stadium_id = 0 and event_id = tournament_id and status = "scheduled"'
        title = 'Number of games that are having empty stadium id'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_locations where country = "usa" and state="" and id not in (5166)'
        title = 'Number of USA locations that are having empty state in sports_locations'
        self.get_result_count(query, title)

        query = "select count(*) from sports_games G, sports_stadiums ST, sports_locations L where G.stadium_id=ST.id and ST.location_id=L.id and G.tournament_id in (240, 88, 229, 197, 34) and L.country not in ('USA', 'Canada')"
        title = "Number of Major US leagues games having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and T.tournament_id in (240, 88, 229, 197, 34, 1870) and L.country not in ('USA', 'Canada')"
        title = "Number of Major US leagues teams having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T, sports_tournaments_participants TP where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and L.country not in ('USA', 'Canada') and T.participant_id=TP.participant_id and TP.tournament_id in (240, 88, 229, 197, 34, 1870)"
        title = "Number of Major US leagues participants having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and T.tournament_id in (578, 579, 580,3843,3838) and L.country not in ('Italy', 'San Marino')"
        title = "Number of Italian leagues teams having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_games G, sports_stadiums ST, sports_locations L where G.stadium_id=ST.id and ST.location_id=L.id and G.tournament_id in (578, 579, 580, 3843, 3838) and L.country not in ('Italy')"
        title = "Number of Italian leagues games having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T, sports_tournaments_participants TP where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and L.country not in ('Italy', 'San Marino') and T.participant_id=TP.participant_id and TP.tournament_id in (578, 579, 580, 3843, 3838)"
        title = "Number of Italian league participants having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T, sports_tournaments_participants TP where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and L.country not in ('Spain') and T.participant_id=TP.participant_id and TP.tournament_id in (29, 609, 610, 3647, 3626)"
        title = "Number of Spanish league participants having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_games G, sports_stadiums ST, sports_locations L where G.stadium_id=ST.id and ST.location_id=L.id and G.tournament_id in (29, 609, 610, 3647, 3626) and L.country not in ('Spain')"
        title = "Number of Spanish league games having wrong location_id"
        self.get_result_count(query, title)

        query = "select SP.id from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and T.tournament_id in (29, 609, 610, 3647,3626) and L.country not in ('Spain')"
        title = "Number of Spanish league teams having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_games G, sports_stadiums ST, sports_locations L where G.stadium_id=ST.id and ST.location_id=L.id and G.tournament_id in (574,575,4096,33) and L.country not in ('Germany')"
        title = "Number of German league games having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T, sports_tournaments_participants TP where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and L.country not in ('Germany') and T.participant_id=TP.participant_id and TP.tournament_id in (574,575,4096,33)"
        title = "Number of German league participants having wrong location_id"
        self.get_result_count(query, title)

        query = 'select count(*) from sports_tournaments where sport_id =13 and type in ("tournament", "event") and season_start != season_end  and status !="obsolete" and id !=3014'
        title = "Number of motorcycle racing games having not having proper season dates"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and T.tournament_id in (574,575,4096,33) and L.country not in ('Germany')"
        title = "Number of German league teams having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and T.tournament_id in (32,569,571,1850,2850,4876,1891,3419,3601,570) and L.country not in ('France') and SP.id not in (902, 102901, 154946)"
        title = "Number of French league teams having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_games G, sports_stadiums ST, sports_locations L where G.stadium_id=ST.id and ST.location_id=L.id and G.tournament_id in (32,569,571,2850,4876,1891,3419,3601,570) and L.country not in('France','Monaco')"
        title = "Number of French league games having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T, sports_tournaments_participants TP where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and L.country not in ('France') and T.participant_id=TP.participant_id and TP.tournament_id in(32,569,571,2850,4876,1891,3419,3601,570) and L.id not in (9890)"
        title = "Number of French league participants having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and T.tournament_id in (35,567,28,559,30,7701,214,2207,582)and L.country not in ('England', 'Wales')"
        title = "Number of English league teams having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T, sports_tournaments_participants TP where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and L.country not in ('England', 'Wales') and T.participant_id=TP.participant_id and TP.tournament_id in (35,567,28,559,30,7701,214,2207, 582)"
        title = "Number of English leagues participants having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_games G, sports_stadiums ST, sports_locations L where G.stadium_id=ST.id and ST.location_id=L.id and G.tournament_id in (35,567,28,559,30,7701,214,2207,582) and L.country not in ('England','Wales')"
        title = "Number of English leagues games having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_games G, sports_stadiums ST, sports_locations L where G.stadium_id=ST.id and ST.location_id=L.id and G.tournament_id in (573, 3385, 3389, 3390) and L.country not in ('Brazil')"
        title = "Number of Brazilian leagues games having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T, sports_tournaments_participants TP where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and L.country not in ('Brazil') and T.participant_id=TP.participant_id and TP.tournament_id in (573, 3385, 3389, 3390)"
        title = "Number of Brazilian league participants having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and T.tournament_id in (573, 3385, 3389,3390)and L.country not in ('Brazil')"
        title = "Number of Brazilian league teams having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_games G, sports_stadiums ST, sports_locations L where G.stadium_id=ST.id and ST.location_id=L.id and G.tournament_id in (586, 3227, 3393, 3394,2841) and L.country not in ('Mexico')"
        title = "Number of Mexican league games having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and T.tournament_id in (586, 3227, 3393,3394,2841)and L.country not in ('Mexico')"
        title = "Number of Mexican league teams having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T, sports_tournaments_participants TP where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and L.country not in ('Mexico') and T.participant_id=TP.participant_id and TP.tournament_id in (586, 3227, 3393, 3394,2841)"
        title = "Number of Mexican league participants having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T, sports_tournaments_participants TP where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and L.country not in ('Australia') and T.participant_id=TP.participant_id and TP.tournament_id in (2553,2554,2210)"
        title = "Number of Australian league participants having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_participants SP, sports_stadiums ST, sports_locations L, sports_teams T where SP.id=T.participant_id and T.stadium_id=ST.id and ST.location_id=L.id and T.tournament_id in (2553,2554,2210)and L.country not in ('Australia')"
        title = "Number of Australian league teams having wrong location_id"
        self.get_result_count(query, title)

        query = "select count(*) from sports_games G, sports_stadiums ST, sports_locations L where G.stadium_id=ST.id and ST.location_id=L.id and G.tournament_id in (2553,2554,1825,2210) and L.country not in ('Australia','New Zealand')"
        title = "Number of Australian league games having wrong location_id"
        self.get_result_count(query, title)

        query = 'select count(*), tournament_id  from sports_tournaments_participants where tournament_id in(1850,2905,2235,222,1825,896,52,5476,15,288,25,1491,244,68,242,63,246,290,70,67,78,272,3601,631,357,569,572,1891,3419,2850,267,81,266,359,585,1,378,87,591,89,1015,91,1064,258,92,255,2207,231,228,233,519,277,225,273,597,509,88,276,1115,954,364,2841,586,577,598,596,573,589,34,595,2209,9,197,2553,559,570,213,609,564,578,4096,33,599,574,590,35,215,28,214,575,32,29,579,216,1105,571,567,558,562,610,240,3838,229,3626,580,529,1082,1083,1084,1085,1116,1117) and tournament_id not in (select id from sports_tournaments where sport_id in (8, 5, 13)) and participant_id not in (select entity_id from sports_rovi_merge  where entity_type = "team") group by tournament_id'
        title ='Number of sports package leagues not having teams rovi merge'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_players where weight not like \'% kg%\' and weight !=""'
        title = 'Number of players that are having invalid weight in sports_players'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_players where height not like \'% cm%\' and height !=""'
        title = 'Number of players that are having invalid height in sports_players'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_tournaments where FIND_IN_SET(title, aka)'
        title = 'Number of tournaments having same aka filed as title'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_teams where category like \'%ncaa%\' and (display_title = "" or short_title = "")'
        title = 'Number of NCAA tournaments are not having st or dt title'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_teams where category like \'%ncaa%\' and display_title = short_title'
        title = 'Number of NCAA tournaments having same st and dt title'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_tournaments where id in (select tournament_id from sports_concepts_tournaments where concept_id =52) and YEAR(season_start)!=YEAR(CURDATE())'
        title = 'Number of Formula One tournaments having wrong tournament dates'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_tournaments where id in (select tournament_id from sports_concepts_tournaments where concept_id in (1001, 1115, 1116, 1117)) and YEAR(season_start)!=YEAR(2019)'
        title = 'Number of MotoGp tournaments having wrong tournament dates'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_teams where category="ncaa-ncf"  group by display_title having count(*) > 1'
        title = 'Number of NCAAF teams having same dt title'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_teams where category="ncaa-ncb"  group by display_title having count(*) > 1'
        title = 'Number of NCAAMB teams having same dt title'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_teams where category="ncaa-ncw"  group by display_title having count(*) > 1'
        title = 'Number of NCAAWB teams having same dt title'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_teams where category="ncaa-mlb"  group by display_title having count(*) > 1'
        title = 'Number of NCAAMLB teams having same dt title'
        self.get_result_count(query, title)

        '''
        query = "select count(*) from sports_tournaments where aka like CONCAT('%', title, '%')" 
        title = 'Number of tournaments having same aka filed like title'
        self.get_result_count(query, title) 
        '''

        query = "select count(*) from sports_teams T, sports_participants P, sports_tournaments ST where P.id = T.participant_id and T.tournament_id = ST.id and ST.sport_id='7' and P.sport_id='4'"
        title = 'Number of soccer teams having football as game in sports_participants'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_source_keys where source_key =""'
        title = 'Number of participants having empty source key in sports_source_keys'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_players where main_role ="Centre"'
        title = 'Number of player having role as Centre in sports_players instead of Center'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_players where main_role ="Nose tackle"'
        title = 'Number of player having role as Nose tackle in sports_players instead of Defensive tackle'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_players where main_role ="Defenseman"'
        title = 'Number of player having role as Defenseman in sports_players instead of Defenceman'
        self.get_result_count(query, title)
        
        query = 'select count(*) from sports_games where id in (select distinct game_id from sports_games_results where participant_id=0 and result_type like "%je%" and result_value = 0)'
        title = 'Number of cycling games not having proper result_value'
        self.get_result_count(query, title)
       
        query = 'select count(*) from sports_source_keys where entity_type="participant" and source="radar" and entity_id not in (select id from sports_participants)'
        title = 'Number of playes present in radar source_keys, but not present in sposrts_participants'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_images_mapping where entity_type = "player" and entity_id  not in (select id from sports_participants)'
        title = 'Number of players present in sports_images_mapping and not present in sports_participats'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_images_mapping where entity_type = "team" and entity_id  not in (select id from sports_participants)'
        title = 'Number of teams present in sports_images_mapping and not present in sports_participats'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_images_mapping where entity_type = "game" and entity_id  not in (select id from sports_games)'
        title = 'Number of games present in sports_images_mapping and not present in sports_games'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_radar_tags where entity_type = "player" and entity_id  not in (select id from sports_participants)'
        title = 'Number of players present in sports_radar_tags and not present in sports_participats'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_tournaments where type ="event" and id not in (select event_id from sports_tournaments_events)'
        title = 'Number of tournament events not having mapping in sports_tournaments_events table'
        self.get_result_count(query, title)


        query = 'select count(*) from sports_images_mapping where image_id not in (select id from sports_images)'
        title = 'Number of image_id present in sports_images_mapping and not present in sports_images'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_radar_tags where entity_type = "team" and entity_id  not in (select id from sports_participants)'
        title = 'Number of teams present in sports_radar_tags and not present in sports_participats'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_radar_tags where image_id not in (select id from sports_images)'
        title = 'Number of image_id present in sports_radar_tags and not present in sports_images'
        self.get_result_count(query, title)
        
        query = 'select count(*) from sports_games where id not in (select entity_id  from sports_source_keys where entity_type ="game") and game_datetime >= curdate() and status !="Hole"'
        title = 'Number of games having with out source keys'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_images_mapping Imm, sports_images Im, sports_participants P where P.id=Imm.entity_id and Im.id=Imm.image_id and P.sport_id="4" and Imm.entity_type="player" and Im.image_url not like "%nfl%" and Im.image_url not like "%ncaafb%"'
        title = 'Number of football players having wrong image mapping'
        self.get_result_count(query, title)
        
        query = 'select count(*) from sports_images_mapping Imm, sports_images Im, sports_participants P where P.id=Imm.entity_id and Im.id=Imm.image_id and P.sport_id="1" and Imm.entity_type="player" and Im.image_url not like "%mlb%"'
        title = 'Number of baseball players having wrong image mapping'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_images_mapping Imm, sports_images Im, sports_participants P where P.id=Imm.entity_id and Im.id=Imm.image_id and P.sport_id="2" and Imm.entity_type="player" and Im.image_url not like "%nba%" and Im.image_url not like "%ncaamb%"' 
        title = 'Number of basketball players having wrong image mapping'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_images_mapping Imm, sports_images Im, sports_participants P where P.id=Imm.entity_id and Im.id=Imm.image_id and P.sport_id="3" and Imm.entity_type="player" and Im.image_url not like "%nhl%"'
        title = 'Number of hockey players having wrong image mapping'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_images_mapping Imm, sports_images Im, sports_participants P where P.id=Imm.entity_id and Im.id=Imm.image_id and P.sport_id="8" and Imm.entity_type="player" and Im.image_url not like "%golf%"'
        title = 'Number of golf players having wrong image mapping'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_images_mapping Imm, sports_images Im, sports_participants P where P.id=Imm.entity_id and Im.id=Imm.image_id and P.sport_id="6" and Imm.entity_type="player" and Im.image_url not like "%cricket%"'
        title = 'Number of cricket players having wrong image mapping'
        self.get_result_count(query, title)


        query = 'select count(*) from sports_images_mapping Imm, sports_images Im, sports_participants P where P.id=Imm.entity_id and Im.id=Imm.image_id and P.sport_id="10" and Imm.entity_type="player" and Im.image_url not like "%nascar%"'
        title = 'Number of auto racing players having wrong image mapping'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_images_mapping Imm, sports_images Im, sports_participants P where P.id=Imm.entity_id and Im.id=Imm.image_id and P.sport_id="7" and Imm.entity_type="player" and Im.image_url not like "%soccer%" and Im.image_url not like "%mls-%"' 
        title = 'Number of soccer players having wrong image mapping'
        self.get_result_count(query, title)

        query = 'select count(*)  from sports_tournaments_participants where tournament_id in (33, 32, 29, 35, 579) and participant_id not in (select entity_id from sports_images_mapping where entity_type ="team")'
        title = 'Number of Euro leagues teams not having images'
        self.get_result_count(query, title)

        query = 'select count(*)  from sports_tournaments_participants where tournament_id in (88, 240, 229, 197) and participant_id not in (select entity_id from sports_images_mapping where entity_type ="team")'
        title = 'Number of Major leagues teams not having images'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_tournaments_results where participant_id = 0 and result_type not like "%order%" and result_type not like "%winner%"'
        title = 'Number of records having 0 participant_id in sports_tournaments_results table'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_groups_results where participant_id = 0 and result_type !="standings_order"'
        title = 'Number of records having 0 participant_id in sports_groups_results table'
        self.get_result_count(query, title)

        query = 'select count(*) from sports_roster where length(season) > 4 and length(season) > 7;'
        title = 'Number of records having wrong season in sports_roster table'
        self.get_result_count(query, title)

        query = 'select count(*) from SPORTSRADARDB.sports_thuuz_games where Ti in ("%s") and Sk collate utf8_unicode_ci not in (select thuuz_id from SPORTSRADARDB.sports_thuuz_merge) and year(Od) = year(curdate())'
        thuuz_leagues = ("FRAN","NFL","EPL","BUND","LIGA", "MLS","MLB", "SERI", "NBA", "NHL")
        #thuuz_leagues = ("FRAN","EPL","BUND","LIGA", "MLS", "SERI", "NBA",)
        title = 'Number of %s games thuuz merge is missing'
        for t_league in thuuz_leagues:
            t_query = query % t_league
            t_title = title % t_league
            self.get_result_count(t_query, t_title)

        """query = 'select * from SPORTSRADARDB.sports_thuuz_games where Ti in ("MLB") and Sk collate utf8_unicode_ci not in (select thuuz_id from SPORTSRADARDB.sports_thuuz_merge) and year(Od) = year(curdate()) and Od not between "2019-04-26" and "2019-05-26"'
        title = 'Number of MLB games thuuz merge is missing'
        self.get_result_count(query, title)

        query = 'select * from SPORTSRADARDB.sports_thuuz_games where Ti in ("NHL") and Sk collate utf8_unicode_ci not in (select thuuz_id from SPORTSRADARDB.sports_thuuz_merge) and year(Od) = year(curdate()) and Od not between "2019-04-18" and "2019-05-08"'
        title = 'Number of NHL games thuuz merge is missing'
        self.get_result_count(query, title)

        query = 'select * from SPORTSRADARDB.sports_thuuz_games where Ti in ("NFL") and Sk collate utf8_unicode_ci not in (select thuuz_id from SPORTSRADARDB.sports_thuuz_merge) and year(Od) = year(curdate()) and Od not between "2019-04-26" and "2019-04-27"'
        title = 'Number of NFL games thuuz merge is missing'
        self.get_result_count(query, title)
        
        query = 'select thuuz_id, count(*) from sports_thuuz_merge  group by thuuz_id having count(*) > 1'
        title = 'Number of games in thuuz merge more than one thuuz_id'"""

        """query = 'select count(*) from SPORTSRADARDB.sports_games where tournament_id in ("%s") and id not in (select radar_id from SPORTSRADARDB.sports_radar_merge) and year(game_datetime) = year(curdate())'
        radar_leagues = {'2fa448bc-fc17-4d3d-be03-e60e080fdc26': 'MLB', '4353138d-4c22-4396-95d8-5f587d2df25c': 'NBA',
                         'fd560107-a85b-4388-ab0d-655ad022aff7': 'NHL', 'NFL': 'NFL', 'sr:tournament:242': 'MLS'}
        for key, value in radar_leagues.iteritems():
            r_query = query % key
            r_title = 'Number of %s radar merge is missing' % value
            self.get_result_count(r_query, r_title)"""

        query = 'select count(distinct(SG.id)) from sports_games_participants SP, sports_participants P, sports_games SG where SP.participant_id = P.id and SG.id = SP.game_id and P.title like "%TBD%" and status = "scheduled" and date(game_datetime) between curdate() -7 and curdate() + 7'
        title = 'Number of games with TBD participants'
        self.get_result_count(query, title)

        '''
        query = 'select count(*) from (select distinct(entity_id), count(*) from sports_source_keys where source="radar" and entity_type ="participant" group by entity_id having count(*) > 1 order by count(*) desc) a'
        title = 'Number of playes having more than one radar source_key in sports_source_keys'
        self.get_result_count(query, title)
        '''

        query = 'select count(id) from sports_games where status = "scheduled" and id in (select game_id from sports_games_results) and sport_id !="6";'
        title = 'Number of scheduled games having results in sports_games_results'
        self.get_result_count(query, title)

        query = 'select count(distinct(city)) from sports_locations where city = BINARY UPPER(city) and city !=""'
        title = 'Number of cities having Upper case in sports_locations'
        self.get_result_count(query, title)

        query = 'select id from sports_participants where sport_id =0'
        title = 'Number of partcipants having sport_id as 0'
        self.get_result_list_count(query, title)

        query = 'select id from sports_tournaments where sport_id =0'
        title = 'Number of tournaments having sport_id as 0'
        self.get_result_list_count(query, title)

        query = 'select id from sports_participants where title = ""'
        title = 'Number of participants having title as empty'
        self.get_result_list_count(query, title)

        '''
        query = 'select count(*) from sports_players where birth_place like "%, USA%" and birth_place not like "%Islands%"'
        title = 'Number of players having USA as birth_place in sports_players'
        self.get_result_count(query, title)
        '''

        query = 'select count(*) from sports_games where event_id in (240, 197, 229, 88, 216, 215) and game_datetime >"2015-01-01" and status !="Hole"'
        title = 'Number of major leagues games having wrong event_id in sports_games'
        self.get_result_count(query, title)

        for each_game_event in ('5', ):
            sport_title = self.get_sport_type(each_game_event)
            query = "select G.gid, G.game_datetime, G.sport_id, R.game_id, count(*) from sports_games G, sports_games_results R where G.id = R.game_id and R.result_type = 'winner' and G.sport_id = '%s' and game_datetime >= (curdate() - interval 70 day) group by game_id  having count(*) > 2 " % each_game_event
            title = 'Number of %s events having more than 2 winners' % sport_title
            self.get_result_list_count(query, title)

            query = "select G.gid, G.game_datetime, G.sport_id, R.game_id, count(*) from sports_games G, sports_games_results R where G.id = R.game_id and R.result_type = 'final' and G.sport_id = '%s' and game_datetime >= (curdate() - interval 70 day) group by game_id  having count(*) not in (2, 4) " % each_game_event
            title = 'Number of %s events not having 2 or 4 finals' % sport_title
            self.get_result_list_count(query, title)

            query = "select G.gid, G.sport_id, P.game_id, count(*) from sports_games G, sports_games_participants P where G.id = P.game_id and G.sport_id = '%s' and game_datetime >= (curdate() - interval 70 day) group by game_id having count(*) not in (2, 4)" % each_game_event
            title = 'Number of %s events not having 2 or 4 participants' % sport_title
            self.get_result_list_count(query, title)

        for each_game_event in ('7', '4', '2', '1', '6', '3', '45'):
            sport_title = self.get_sport_type(each_game_event)
            query = "select G.gid, G.game_datetime, G.sport_id, R.game_id, count(*) from sports_games G, sports_games_results R where G.id = R.game_id and R.result_type = 'winner' and G.sport_id = '%s' and game_datetime >= (curdate() - interval 70 day) group by game_id  having count(*) > 1 " % each_game_event
            title = 'Number of %s events having more than one winners' % sport_title
            self.get_result_list_count(query, title)

            query = "select G.gid, G.game_datetime, G.sport_id, R.game_id, count(*) from sports_games G, sports_games_results R where G.id = R.game_id and R.result_type = 'final' and G.sport_id = '%s' and game_datetime >= (curdate() - interval 70 day) group by game_id  having count(*) not in (2)" % each_game_event
            title = 'Number of %s events not having two finals' % sport_title
            self.get_result_list_count(query, title)

            query = "select G.gid, G.sport_id, P.game_id, count(*) from sports_games G, sports_games_participants P where G.id = P.game_id and G.sport_id = '%s' and game_datetime >= (curdate() - interval 70 day) and G.status != 'Hole' group by game_id having count(*) not in (2)" % each_game_event
            title = 'Number of %s events not having 2 participants' % sport_title
            self.get_result_list_count(query, title)

            query = "select G.id,  count(distinct R.participant_id) as PART_COUNT from sports_games G, sports_games_results R where G.id = R.game_id  and G.sport_id = '%s' and game_datetime >= (curdate() - interval 70 day) and R.participant_id != 0 group by G.id having PART_COUNT > 2" % each_game_event
            title = 'Number of %s game_results having more than 2 participants' % sport_title
            self.get_result_list_count(query, title)

        query = "select id, gid, game_datetime, status  from sports_games where sport_id = '6' and status = 'completed' and tournament_id !=722 and id in (select game_id from sports_games_results where result_type = 'man_of_the_match' and result_value = '') and id not in %s" %str(CRICKET_EMPTY_MOM)
        title = 'Number of completed cricket games that does not have man of the match'
        self.get_result_list_count(query, title)

        query = "select id, gid, game_datetime, status  from sports_games where sport_id = '6' and status = 'completed' and tournament_id not in(722,2206) and id not in (select game_id from sports_games_results where result_type = 'man_of_the_match') and game_datetime < curdate() and year(game_datetime) = year(curdate()) and id not in %s" % str(CRICKET_EMPTY_MOM)
        title = 'Number of completed cricket games that does not have man of the match as result_type'
        self.get_result_list_count(query, title)

        query = "select gid, title from sports_participants where participant_type = 'player' and id not in (select participant_id from sports_players)"
        title = 'Number of players present in sports_participants not in sports_players table'
        self.get_result_list_count(query, title)

        query = "select gid, title from sports_participants where participant_type = 'team' and id not in (select participant_id from sports_teams)"
        title = 'Number of teams present in sports_participants not in sports_teams table'
        self.get_result_list_count(query, title)

        query = "select participant_id from sports_players where participant_id not in (select id from sports_participants where participant_type in ('player', 'obsolete', 'retired'))"
        title = 'Number of players present in sports_players not in sports_participants table'
        self.get_result_list_count(query, title)

        query = "select participant_id, short_title from sports_teams where participant_id not in (select id from sports_participants where participant_type in ('team', 'obsolete', 'retired'))"
        title = 'Number of teams present in sports_teams not in sports_participants table'
        self.get_result_list_count(query, title)

        '''query = "select sports_gid from sports_wiki_merge where sports_gid = '% %'"
        title = 'Number of sports_gid that have space in sports_wiki_merge'
        self.get_result_list_count(query, title)

        query = "select wiki_gid from sports_wiki_merge where wiki_gid = '% %'"
        title = 'Number of wiki_gid that have space in sports_wiki_merge'
        self.get_result_list_count(query, title)'''

        query = "select id, title, sport_id from sports_participants where participant_type = 'team' and gid like '%PL%'"
        title = 'Number of teams with PL gid'
        self.get_result_list_count(query, title)

        query = "select id, title, sport_id from sports_participants where participant_type = 'player' and gid like '%TEAM%'"
        title = 'Number of players with team gid'
        self.get_result_list_count(query, title)

        query = 'select count(*) from sports_rovi_merge where entity_type = "league" group by entity_id having count(*) > 1 order by count(*) desc'
        title = "Number of leagues having mismatching rovi merge"
        self.get_result_list_count(query, title)

        query = 'select count(*) from sports_rovi_merge where entity_type = "team" group by entity_id having count(*) > 1   order by count(*) desc'
        title = "Number of teams having mismatching rovi merge"
        self.get_result_list_count(query, title)

        query = 'select count(*) from sports_rovi_merge where entity_type = "player" group by entity_id having count(*) > 1 order by count(*) desc'
        title = "Number of players having mismatching rovi merge"
        self.get_result_list_count(query, title)
        
        query = 'select count(*) from sports_rovi_merge where entity_type = "tournament" group by entity_id having count(*) > 1 order by count(*) desc'
        title = "Number of tournaments having mismatching rovi merge"
        self.get_result_list_count(query, title)

        '''
        for check_game in self.sports_games_winners:
            query = "select id, gid, game_datetime, status  from sports_games where sport_id = '%s' and status = 'completed' and id not in (select game_id from sports_games_results where result_type = 'match_result') and game_datetime >= (curdate() - interval 70 day)" % check_game
            title = 'Number of completed %s games that does not have match_result as result_type' % check_game
            self.get_result_list_count(query, title)
        '''
        query = "select id, gid, game_datetime, status  from sports_games where sport_id = '6' and status = 'completed' and id not in (select game_id from sports_games_results where result_type = 'match_result') and game_datetime >= (curdate() - interval 70 day)"
        title = 'Number of completed cricket games that does not have match_result as result_type'
        self.get_result_list_count(query, title)

        query = "select * from sports_tournaments_results where result_sub_type like '%singles%' and season in (YEAR(now())) group by tournament_id,result_sub_type having count(*) > 1"
        title = 'Number of Tennis Singles have more than one winners in sports_tournaments_results'
        self.get_result_list_count(query, title)

        for games in ('8', '10', '13'):
            sport_title = self.get_sport_type(games)
            query = "select tournament_id, result_sub_type, count(*) from sports_tournaments_results where tournament_id in (select id from sports_tournaments where sport_id = '%s' and tournament_id not in %s) and result_type not in ('standings', 'standings_order') group by tournament_id, result_sub_type, season having count(*) > 1" % (games, str(TWO_TOURNAMENT_GAMES))
            title = 'Number of %s tournaments have more than one winners for same season in sports_tournaments_results' % sport_title
            self.get_result_list_count(query, title)

        query = "select tournament_id, result_sub_type, count(*) from sports_tournaments_results where result_sub_type like '%doubles%' and season = year(curdate()) group by tournament_id,result_sub_type having count(*) > 2"
        title = 'Number of Tennis Doubles have more than two winners in sports_tournaments_results'
        self.get_result_list_count(query, title)

        query = "select gid, title from sports_participants where participant_type  not in ('team', 'player', 'obsolete', 'retired')"
        title = 'Number of participants having wrong participant_type'
        self.get_result_list_count(query, title)

        query = "select id, title from sports_stadiums where gid = '' or gid is NULL"
        title = 'Number of stadiums having empty gid'
        self.get_result_list_count(query, title)

        query = "select id, title from sports_stadiums where title = '' or title is NULL"
        title = 'Number of stadiums having empty title'
        self.get_result_list_count(query, title)

        query = "select id, title from sports_stadiums where location_id is NULL or location_id = ''"
        title = 'Number of stadiums having empty location_id'
        self.get_result_list_count(query, title)

        query = "select id, title , sport_id, participant_type  from sports_participants where participant_type != 'obsolete' and participant_type = 'team' and id in (select participant_id from sports_teams where tournament_id = 0 and status != 'obsolete' or tournament_id is NULL)"
        title = 'Number of teams having NULL tournament_id'
        self.get_result_list_count(query, title)

        query = "select gid, title, type from sports_tournaments where type  not in ('tournament', 'event', 'obsolete', 'sportsconcept', 'award', 'draft')"
        title = 'Number of tournament having wrong type'
        self.get_result_list_count(query, title)


        query = "select participant_id, birth_date from sports_players where birth_date < '1900-01-01 00:00:00' and birth_date != '0000-00-00 00:00:00' and participant_id not in (120882, 120881,120893,134655,134672)"
        title = 'Number of players having more than 100 years old'
        self.get_result_list_count(query, title)

        query = "select title, sport_id, participant_type from sports_participants where participant_type = 'team' and id not in (%s) group by title, sport_id, participant_type  having count(*) > 1" % ','.join(map(str, TBD_SKIP_LIST))
        title = 'Number of duplicate teams'
        self.get_result_list_count(query, title)

        query = "select id from sports_games_results where result_value like '%=%'"
        title = "Number of sports_games_results having '=' in result_value"
        self.get_result_list_count(query, title)

        query = "select title, sport_id, type from sports_tournaments where status != 'obsolete' group by title, sport_id, type  having count(*) > 1"
        title = 'Number of duplicate tournaments'
        self.get_result_list_count(query, title)

        query = "select distinct(player_id) from sports_roster where status = 'active' group by player_id having count(*) > 1"
        title = "Number of active rosters participating in more that one team"
        self.cursor.execute(query)
        data = self.cursor.fetchall()
        self.duplicate_rosters = set([d[0] for d in data])
        query = "select id from sports_participants where id in (%s) and sport_id not in ('6', '7', '11', '12')" % ','.join(map(str, self.duplicate_rosters))
        self.get_result_list_count(query, title)

        query = "select id, gid, title from sports_tournaments where affiliation = 'obsolete' and id not in (%s)" % ','.join(map(str, OBSOLETE_TOURNAMENT))
        title = 'Number of tournaments that are active marked as obsolete'
        self.get_result_list_count(query, title)

        query = "select id, gid, title from sports_participants where participant_type = 'obsolete' and id not in (%s)" % ','.join(map(str, OBSOLETE_PARTICIPANTS))
        title = 'Number of participants that are active marked as obsolete'
        self.get_result_list_count(query, title)

        query = "select id from sports_games where status not in ('Hole', 'completed', 'postponed', 'cancelled', 'scheduled', 'retired', 'walkover', 'no_result', 'ongoing', 'suspended','abandoned')"
        title = 'Number of games having invalid status'
        self.get_result_list_count(query, title)

        '''query = "select count(*) from sports_games where game_datetime  like '%06:00:%' and sport_id in ('1', '2', '3', '4') and status !='Hole'"
        title = 'Number of US games having wrong game_datetime'
        self.get_result_list_count(query, title)'''

        query = "select gid from sports_participants where gid not like 'TEAM%' and gid not like 'PL%'"
        title = 'Number of participants having invalid gid'
        self.get_result_list_count(query, title)

        query = 'select sport_id, count(id) from sports_games where status="ongoing" and game_datetime < curdate() group by sport_id'
        title = 'Number of games with status as ongoing less than todays date'
        self.get_result_count(query, title)

        query = "select participant_id from sports_teams where BINARY(gender) not in ('male', 'female', '')"
        title = 'Number of teams having invalid gender'
        self.get_result_list_count(query, title)

        query = "select participant_id from sports_players where BINARY(gender) not in ('male', 'female', '')"
        title = 'Number of Players having invalid gender'
        self.get_result_list_count(query, title)

        query = "select id from sports_tournaments where BINARY(gender) not in ('male', 'female', '')"
        title = 'Number of Tournaments having invalid gender'
        self.get_result_list_count(query, title)

        query = "select participant_id from sports_teams where gender = ''"
        title = 'Number of teams not having gender'
        self.get_result_list_count(query, title)

        query = "select participant_id from sports_players where gender = ''"
        title = 'Number of Players not having gender'
        self.get_result_list_count(query, title)

        query = "select participant_id from sports_players where birth_place REGEXP '^[0-9]+$'"
        title = 'Number of players that are having invalid birth_place in sports_players'
        self.get_result_list_count(query, title)

        query = 'select id FROM sports_source_keys WHERE source_key REGEXP "\n"'
        title = 'Number of source_keys having new lines'
        self.get_result_list_count(query, title)

        query = 'select id FROM sports_participants WHERE title REGEXP "\n"'
        title = 'Number of participants having new lines'
        self.get_result_list_count(query, title)

        query = 'select id FROM sports_teams WHERE short_title REGEXP "\n"'
        title = 'Number of teams short_title having new lines'
        self.get_result_list_count(query, title)

        query = 'select id FROM sports_teams WHERE display_title REGEXP "\n"'
        title = 'Number of teams display_title having new lines'
        self.get_result_list_count(query, title)

        query = 'select id FROM sports_tournaments WHERE title REGEXP "\n"'
        title = 'Number of tournaments having new lines'
        self.get_result_list_count(query, title)

        query = "select distinct(child_id), count(*) from sports_types_hierarchy group by child_id having count(*) > 1 order by count(*) desc"
        title = 'Number of sport types having more than one parent id in table'
        self.get_result_list_count(query, title)

        query = "select id from sports_roster where player_number=0 and status ='active' and team_id  in (select participant_id from sports_tournaments_participants where tournament_id in (197, 88, 229, 240))"
        title = 'Number of major leagues players having player_role as 0'
        self.get_result_list_count(query, title)

        self.tournament_missing_images = self.tournament_wiki_gids - set(self.imagedb_gids)
        self.team_missing_images = self.team_wiki_gids - set(self.imagedb_gids)
        self.event_missing_images = self.event_wiki_gids - set(self.imagedb_gids)
        self.player_missing_images = self.player_wiki_gids - set(self.imagedb_gids)
        self.group_missing_images = self.group_wiki_gids - set(self.imagedb_gids)
        self.missing_images_count_imagedb = {}
        if self.tournament_missing_images:
            tournament_imagedb_count = len(self.tournament_wiki_gids) - len(self.tournament_missing_images)
            self.missing_images_count_imagedb['tournament'] = (len(self.tournament_wiki_gids), tournament_imagedb_count, 0)

        if self.team_missing_images:
            team_imagedb_count = len(self.team_wiki_gids) - len(self.team_missing_images) 
            self.missing_images_count_imagedb['team'] = (len(self.team_wiki_gids), team_imagedb_count, 0)

        if self.event_missing_images:
            event_imagedb_count = len(self.event_wiki_gids) - len(self.event_missing_images)
            self.missing_images_count_imagedb['event'] = (len(self.event_wiki_gids), event_imagedb_count, 0)

        if self.player_missing_images or self.placeholder_images:
            player_imagedb_count = len(self.player_wiki_gids) - len(self.player_missing_images)
            self.missing_images_count_imagedb['player'] = (len(self.player_wiki_gids), player_imagedb_count, self.placeholder_images)

        if self.group_missing_images:
            group_imagedb_count = len(self.group_wiki_gids) - len(self.group_missing_images)
            self.missing_images_count_imagedb['groups'] = (len(self.group_wiki_gids), group_imagedb_count, 0)

        self.logger.info('Number of tournament images missing in imagedb : %s'  % str(self.tournament_missing_images))
        self.logger.info('Number of team images missing in imagedb : %s'  % str(self.team_missing_images))
        self.logger.info('Number of event images missing in imagedb : %s'  % str(self.event_missing_images))
        self.logger.info('Number of player images missing in imagedb : %s'  % str(self.player_missing_images))
        self.logger.info('Number of group images missing in imagedb : %s'  % str(self.group_missing_images))

        for key, values in self.tournaments_not_present_dates.iteritems():
            query = "select id, gid from sports_games where game_datetime >= '%s' and game_datetime <= '%s' and tournament_id in (select id from sports_tournaments where title like '%s%s') and status not like 'hole'" % (values[0], values[1], key, pattern)
            title = 'Number of %s games present between %s and %s ' % (key, values[0], values[1])
            self.get_result_list_count(query, title)

        self.close_cursor()

        self.sanity_list.append((len(self.not_matching_participant_results), 'Number of completed events - their pariticipants are not matching in result and participant tables'))
        #self.sanity_list.append((len(self.remain_parent_dict),  'Number of tournaments does not have wiki merge'))
        #self.sanity_list.append((len(self.all_team_merge_dict), 'Number of teams does not have wiki merge'))
        self.sanity_list.append((self.count_event_null_check, 'Number of games without correct event id'))
        self.sanity_list.append((len(self.sports_games_completed - self.sports_games_winners_set), 'Number of completed games that does not have winner result type'))
        self.sanity_list.append((len(self.no_game_major_team[0]), 'Number of major teams that does not have games in the next one week'))
        #self.sanity_list.append((len(self.tournament_missing_images), 'Number of tournament images missing in imagedb'))
        #self.sanity_list.append((len(self.team_missing_images), 'Number of team images missing in imagedb'))

        for key, values in self.more_participants_for_events.iteritems():
            self.sanity_list.append((len(set(self.more_participants_for_events[key])), 'Number of %s games/events having more than or less than 2 participants' % key))
            self.logger.info('Number of %s games/events having more than or less than 2 participants  :  %s' % (key, set(self.more_participants_for_events[key])))
        for key, values in self.not_final_result_type_games.iteritems():
            sport_title = self.get_sport_type(key)
            self.sanity_list.append((len(self.not_final_result_type_games[key]), 'Number of %s games, their participants final result_type are not correct' % sport_title))
            self.logger.info('Number of %s games, their participants final result_type are not correct : %s' % (sport_title, self.not_final_result_type_games[key]))

        for key, values in self.games_participant_result_check_val.iteritems():
            sport_title = self.get_sport_type(key)
            self.sanity_list.append((len(values), 'Number of %s games, their participants and results particiapnts are not matching' % sport_title))
            self.logger.info('Number of %s games, their participants and results particiapnts are not matching : %s' % (sport_title, values))

        for key, val in self.sports_participants_val.iteritems():
            sport_title = self.get_sport_type(key)
            for k, v in val.iteritems():
                if k == 'team':
                    self.sanity_list.append((len(self.sports_participants_val[key][k]), 'Number of duplicate team titles for %s' % sport_title))
                    self.logger.info('Number of duplicate team titles for %s  : %s ' % (sport_title, self.sports_participants_val[key][k]))
                if k == 'player':
                    self.sanity_list.append((len(self.sports_participants_val[key][k]), 'Number of duplicate player titles for %s' % sport_title))
                    self.logger.info('Number of duplicate player titles for %s  : %s ' % (sport_title, self.sports_participants_val[key][k]))

        total_count, fail_count = 0, 0
        self.sanity_list.sort()
        #import pdb;pdb.set_trace()
        for row in self.sanity_list:
            total_count += 1
            if len(row) == 2:
                count, title = row
                if count:
                    BIG_LIST.append((title, count))
            else:
                count, title, games = row
                if count: BIG_LIST.append((title, count, games))
            fail_count += 1

        game_list = self.sports_games_winners.keys()
        game_list.sort()

        self.logger.info('Count of each participants having more than one game in a day')
        #print 'Count of each participants having more than one game in a day'
        game_format = ' '.join([ '%-10s' ] * (len(game_list) + 1))
        self.logger.info(game_format % tuple([ 'Date' ] + game_list))
        #print game_format % tuple([ 'Date' ] + game_list)

        game_format = ' '.join([ '%-10s' ] + [ '%10s' ] * (len(game_list)))
        for key in sorted(self.final_noof_games_for_participants.keys(), reverse = True):
            values = self.final_noof_games_for_participants[key]
            value_list = [ len(values.get(game, [])) for game in game_list ]
            new_value_list = []
            for count in value_list:
                if count:
                    new_value_list.append('<span class="badge badge-important">%s</span>' % (count))
                else:
                    new_value_list.append('')

            self.logger.info(game_format % tuple([ key ] + new_value_list))
            #print game_format % tuple([ key ] + new_value_list)

        count_str = '%d/%d' % (fail_count, total_count)
        jinja_environment = jinja2.Environment(loader=jinja2.FileSystemLoader(os.getcwd()))
        table_html = jinja_environment.get_template('sportsdb_sanity.jinja').render(today_date = datetime.now(), sanity_str = count_str, big_list=BIG_LIST, game_list = self.games_happened_jinja, val_list = self.final_noof_games_for_participants_jinja, null_tou_image = self.null_image_tournament, null_player_image = self.null_image_player, null_team_image = self.null_image_team, sports_teams_sports_tou_part_not_match = self.diff_sports_teams_sports_tou_parti, sportsdb_games_count_eachteams = self.sportsdb_games_count_eachteams, ongoing_season_ends = self.ongoing_season_end, major_team_game_list = self.major_team_games, log_file = self.latest_log_file, missing_images_count_imagedb = self.missing_images_count_imagedb, wrong_tournament_dates = self.wrong_dates, finals_dates = self.finals_dates)

        #open(os.path.join(REPORT_DIR, 'SPORTSDB_SANITY_REPORT.html'), 'w').write(table_html)
        codecs.open(os.path.join(REPORT_DIR, 'SPORTSDB_SANITY_REPORT.html'), 'w', 'utf8').write(table_html)


if __name__ == '__main__':
    vtv_task_main(DBSanity)
    sys.exit( 0 )

